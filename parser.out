Grammar:

Rule 0     S' -> statements
Rule 1     statements -> stmt
Rule 2     statements -> statements stmt
Rule 3     stmt -> RETURN expr ;
Rule 4     stmt -> CONTINUE ;
Rule 5     stmt -> BREAK ;
Rule 6     stmt -> print_stmt
Rule 7     stmt -> assign_expr
Rule 8     stmt -> for_stmt
Rule 9     stmt -> while_stmt
Rule 10    stmt -> if_stmt
Rule 11    stmt -> { statements }
Rule 12    stmt -> ;
Rule 13    if_stmt -> IF ( rel_expr ) stmt  [precedence=nonassoc, level=1]
Rule 14    if_stmt -> IF ( rel_expr ) stmt ELSE stmt  [precedence=nonassoc, level=2]
Rule 15    for_stmt -> FOR referance = value : value stmt
Rule 16    while_stmt -> WHILE ( rel_expr ) stmt
Rule 17    print_stmt -> PRINT value
Rule 18    IntNum -> INTNUM
Rule 19    FloatNum -> FLOATNUM
Rule 20    String -> STRING
Rule 21    value -> referance
Rule 22    value -> String
Rule 23    value -> FloatNum
Rule 24    value -> IntNum
Rule 25    matrix_func -> EYE ( value )
Rule 26    matrix_func -> ONES ( value )
Rule 27    matrix_func -> ZEROS ( value )
Rule 28    string_of_values -> string_of_values , vector
Rule 29    string_of_values -> vector
Rule 30    string_of_values -> string_of_values , value
Rule 31    string_of_values -> value
Rule 32    vector -> [ string_of_values ]
Rule 33    referance -> referance vector
Rule 34    referance -> ID
Rule 35    expr -> ( expr )
Rule 36    expr -> expr DOTDIV expr  [precedence=left, level=5]
Rule 37    expr -> expr DOTMUL expr  [precedence=left, level=5]
Rule 38    expr -> expr DOTSUB expr  [precedence=left, level=4]
Rule 39    expr -> expr DOTADD expr  [precedence=left, level=4]
Rule 40    expr -> expr DIV expr  [precedence=left, level=5]
Rule 41    expr -> expr MUL expr  [precedence=left, level=5]
Rule 42    expr -> expr SUB expr  [precedence=left, level=4]
Rule 43    expr -> expr ADD expr  [precedence=left, level=4]
Rule 44    expr -> expr '  [precedence=nonassoc, level=6]
Rule 45    expr -> SUB expr  [precedence=left, level=4]
Rule 46    expr -> matrix_func
Rule 47    expr -> rel_expr
Rule 48    expr -> value
Rule 49    rel_expr -> expr NEQ expr  [precedence=nonassoc, level=3]
Rule 50    rel_expr -> expr EQ expr  [precedence=nonassoc, level=3]
Rule 51    rel_expr -> expr GTE expr  [precedence=nonassoc, level=3]
Rule 52    rel_expr -> expr LTE expr  [precedence=nonassoc, level=3]
Rule 53    rel_expr -> expr GT expr  [precedence=nonassoc, level=3]
Rule 54    rel_expr -> expr LT expr  [precedence=nonassoc, level=3]
Rule 55    assign_expr -> referance DIVASSIGN expr
Rule 56    assign_expr -> referance MULASSIGN expr
Rule 57    assign_expr -> referance SUBASSIGN expr
Rule 58    assign_expr -> referance ADDASSIGN expr
Rule 59    assign_expr -> referance = expr

Terminals, with rules where they appear:

'                    : 44
(                    : 13 14 16 25 26 27 35
)                    : 13 14 16 25 26 27 35
,                    : 28 30
:                    : 15
;                    : 3 4 5 12
=                    : 15 59
ADD                  : 43
ADDASSIGN            : 58
BREAK                : 5
CONTINUE             : 4
DIV                  : 40
DIVASSIGN            : 55
DOTADD               : 39
DOTDIV               : 36
DOTMUL               : 37
DOTSUB               : 38
ELSE                 : 14
EQ                   : 50
EYE                  : 25
FLOATNUM             : 19
FOR                  : 15
GT                   : 53
GTE                  : 51
ID                   : 34
IF                   : 13 14
INTNUM               : 18
LT                   : 54
LTE                  : 52
MUL                  : 41
MULASSIGN            : 56
NEQ                  : 49
ONES                 : 26
PRINT                : 17
RETURN               : 3
STRING               : 20
SUB                  : 42 45
SUBASSIGN            : 57
WHILE                : 16
ZEROS                : 27
[                    : 32
]                    : 32
error                : 
{                    : 11
}                    : 11

Nonterminals, with rules where they appear:

FloatNum             : 23
IntNum               : 24
String               : 22
assign_expr          : 7
expr                 : 3 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 45 49 49 50 50 51 51 52 52 53 53 54 54 55 56 57 58 59
for_stmt             : 8
if_stmt              : 10
matrix_func          : 46
print_stmt           : 6
referance            : 15 21 33 55 56 57 58 59
rel_expr             : 13 14 16 47
statements           : 2 11 0
stmt                 : 1 2 13 14 14 15 16
string_of_values     : 28 30 32
value                : 15 15 17 25 26 27 30 31 48
vector               : 28 29 33
while_stmt           : 9


state 0

    (0) S' -> . statements
    (1) statements -> . stmt
    (2) statements -> . statements stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (17) print_stmt -> . PRINT value
    (55) assign_expr -> . referance DIVASSIGN expr
    (56) assign_expr -> . referance MULASSIGN expr
    (57) assign_expr -> . referance SUBASSIGN expr
    (58) assign_expr -> . referance ADDASSIGN expr
    (59) assign_expr -> . referance = expr
    (15) for_stmt -> . FOR referance = value : value stmt
    (16) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (33) referance -> . referance vector
    (34) referance -> . ID
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    statements                     shift and go to state 1
    stmt                           shift and go to state 2
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11
    referance                      shift and go to state 14

state 1

    (0) S' -> statements .
    (2) statements -> statements . stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (17) print_stmt -> . PRINT value
    (55) assign_expr -> . referance DIVASSIGN expr
    (56) assign_expr -> . referance MULASSIGN expr
    (57) assign_expr -> . referance SUBASSIGN expr
    (58) assign_expr -> . referance ADDASSIGN expr
    (59) assign_expr -> . referance = expr
    (15) for_stmt -> . FOR referance = value : value stmt
    (16) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (33) referance -> . referance vector
    (34) referance -> . ID
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    stmt                           shift and go to state 19
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11
    referance                      shift and go to state 14

state 2

    (1) statements -> stmt .
    RETURN          reduce using rule 1 (statements -> stmt .)
    CONTINUE        reduce using rule 1 (statements -> stmt .)
    BREAK           reduce using rule 1 (statements -> stmt .)
    {               reduce using rule 1 (statements -> stmt .)
    ;               reduce using rule 1 (statements -> stmt .)
    PRINT           reduce using rule 1 (statements -> stmt .)
    FOR             reduce using rule 1 (statements -> stmt .)
    WHILE           reduce using rule 1 (statements -> stmt .)
    IF              reduce using rule 1 (statements -> stmt .)
    ID              reduce using rule 1 (statements -> stmt .)
    $end            reduce using rule 1 (statements -> stmt .)
    }               reduce using rule 1 (statements -> stmt .)


state 3

    (3) stmt -> RETURN . expr ;
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 20
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 4

    (12) stmt -> ; .
    RETURN          reduce using rule 12 (stmt -> ; .)
    CONTINUE        reduce using rule 12 (stmt -> ; .)
    BREAK           reduce using rule 12 (stmt -> ; .)
    {               reduce using rule 12 (stmt -> ; .)
    ;               reduce using rule 12 (stmt -> ; .)
    PRINT           reduce using rule 12 (stmt -> ; .)
    FOR             reduce using rule 12 (stmt -> ; .)
    WHILE           reduce using rule 12 (stmt -> ; .)
    IF              reduce using rule 12 (stmt -> ; .)
    ID              reduce using rule 12 (stmt -> ; .)
    $end            reduce using rule 12 (stmt -> ; .)
    }               reduce using rule 12 (stmt -> ; .)
    ELSE            reduce using rule 12 (stmt -> ; .)


state 5

    (4) stmt -> CONTINUE . ;
    ;               shift and go to state 36


state 6

    (5) stmt -> BREAK . ;
    ;               shift and go to state 37


state 7

    (6) stmt -> print_stmt .
    RETURN          reduce using rule 6 (stmt -> print_stmt .)
    CONTINUE        reduce using rule 6 (stmt -> print_stmt .)
    BREAK           reduce using rule 6 (stmt -> print_stmt .)
    {               reduce using rule 6 (stmt -> print_stmt .)
    ;               reduce using rule 6 (stmt -> print_stmt .)
    PRINT           reduce using rule 6 (stmt -> print_stmt .)
    FOR             reduce using rule 6 (stmt -> print_stmt .)
    WHILE           reduce using rule 6 (stmt -> print_stmt .)
    IF              reduce using rule 6 (stmt -> print_stmt .)
    ID              reduce using rule 6 (stmt -> print_stmt .)
    $end            reduce using rule 6 (stmt -> print_stmt .)
    }               reduce using rule 6 (stmt -> print_stmt .)
    ELSE            reduce using rule 6 (stmt -> print_stmt .)


state 8

    (7) stmt -> assign_expr .
    RETURN          reduce using rule 7 (stmt -> assign_expr .)
    CONTINUE        reduce using rule 7 (stmt -> assign_expr .)
    BREAK           reduce using rule 7 (stmt -> assign_expr .)
    {               reduce using rule 7 (stmt -> assign_expr .)
    ;               reduce using rule 7 (stmt -> assign_expr .)
    PRINT           reduce using rule 7 (stmt -> assign_expr .)
    FOR             reduce using rule 7 (stmt -> assign_expr .)
    WHILE           reduce using rule 7 (stmt -> assign_expr .)
    IF              reduce using rule 7 (stmt -> assign_expr .)
    ID              reduce using rule 7 (stmt -> assign_expr .)
    $end            reduce using rule 7 (stmt -> assign_expr .)
    }               reduce using rule 7 (stmt -> assign_expr .)
    ELSE            reduce using rule 7 (stmt -> assign_expr .)


state 9

    (8) stmt -> for_stmt .
    RETURN          reduce using rule 8 (stmt -> for_stmt .)
    CONTINUE        reduce using rule 8 (stmt -> for_stmt .)
    BREAK           reduce using rule 8 (stmt -> for_stmt .)
    {               reduce using rule 8 (stmt -> for_stmt .)
    ;               reduce using rule 8 (stmt -> for_stmt .)
    PRINT           reduce using rule 8 (stmt -> for_stmt .)
    FOR             reduce using rule 8 (stmt -> for_stmt .)
    WHILE           reduce using rule 8 (stmt -> for_stmt .)
    IF              reduce using rule 8 (stmt -> for_stmt .)
    ID              reduce using rule 8 (stmt -> for_stmt .)
    $end            reduce using rule 8 (stmt -> for_stmt .)
    }               reduce using rule 8 (stmt -> for_stmt .)
    ELSE            reduce using rule 8 (stmt -> for_stmt .)


state 10

    (9) stmt -> while_stmt .
    RETURN          reduce using rule 9 (stmt -> while_stmt .)
    CONTINUE        reduce using rule 9 (stmt -> while_stmt .)
    BREAK           reduce using rule 9 (stmt -> while_stmt .)
    {               reduce using rule 9 (stmt -> while_stmt .)
    ;               reduce using rule 9 (stmt -> while_stmt .)
    PRINT           reduce using rule 9 (stmt -> while_stmt .)
    FOR             reduce using rule 9 (stmt -> while_stmt .)
    WHILE           reduce using rule 9 (stmt -> while_stmt .)
    IF              reduce using rule 9 (stmt -> while_stmt .)
    ID              reduce using rule 9 (stmt -> while_stmt .)
    $end            reduce using rule 9 (stmt -> while_stmt .)
    }               reduce using rule 9 (stmt -> while_stmt .)
    ELSE            reduce using rule 9 (stmt -> while_stmt .)


state 11

    (10) stmt -> if_stmt .
    RETURN          reduce using rule 10 (stmt -> if_stmt .)
    CONTINUE        reduce using rule 10 (stmt -> if_stmt .)
    BREAK           reduce using rule 10 (stmt -> if_stmt .)
    {               reduce using rule 10 (stmt -> if_stmt .)
    ;               reduce using rule 10 (stmt -> if_stmt .)
    PRINT           reduce using rule 10 (stmt -> if_stmt .)
    FOR             reduce using rule 10 (stmt -> if_stmt .)
    WHILE           reduce using rule 10 (stmt -> if_stmt .)
    IF              reduce using rule 10 (stmt -> if_stmt .)
    ID              reduce using rule 10 (stmt -> if_stmt .)
    $end            reduce using rule 10 (stmt -> if_stmt .)
    }               reduce using rule 10 (stmt -> if_stmt .)
    ELSE            reduce using rule 10 (stmt -> if_stmt .)


state 12

    (11) stmt -> { . statements }
    (1) statements -> . stmt
    (2) statements -> . statements stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (17) print_stmt -> . PRINT value
    (55) assign_expr -> . referance DIVASSIGN expr
    (56) assign_expr -> . referance MULASSIGN expr
    (57) assign_expr -> . referance SUBASSIGN expr
    (58) assign_expr -> . referance ADDASSIGN expr
    (59) assign_expr -> . referance = expr
    (15) for_stmt -> . FOR referance = value : value stmt
    (16) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (33) referance -> . referance vector
    (34) referance -> . ID
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    statements                     shift and go to state 38
    stmt                           shift and go to state 2
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11
    referance                      shift and go to state 14

state 13

    (17) print_stmt -> PRINT . value
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    value                          shift and go to state 39
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 14

    (55) assign_expr -> referance . DIVASSIGN expr
    (56) assign_expr -> referance . MULASSIGN expr
    (57) assign_expr -> referance . SUBASSIGN expr
    (58) assign_expr -> referance . ADDASSIGN expr
    (59) assign_expr -> referance . = expr
    (33) referance -> referance . vector
    (32) vector -> . [ string_of_values ]
    DIVASSIGN       shift and go to state 40
    MULASSIGN       shift and go to state 41
    SUBASSIGN       shift and go to state 42
    ADDASSIGN       shift and go to state 43
    =               shift and go to state 44
    [               shift and go to state 46

    vector                         shift and go to state 45

state 15

    (15) for_stmt -> FOR . referance = value : value stmt
    (33) referance -> . referance vector
    (34) referance -> . ID
    ID              shift and go to state 18

    referance                      shift and go to state 47

state 16

    (16) while_stmt -> WHILE . ( rel_expr ) stmt
    (               shift and go to state 48


state 17

    (13) if_stmt -> IF . ( rel_expr ) stmt
    (14) if_stmt -> IF . ( rel_expr ) stmt ELSE stmt
    (               shift and go to state 49


state 18

    (34) referance -> ID .
    DIVASSIGN       reduce using rule 34 (referance -> ID .)
    MULASSIGN       reduce using rule 34 (referance -> ID .)
    SUBASSIGN       reduce using rule 34 (referance -> ID .)
    ADDASSIGN       reduce using rule 34 (referance -> ID .)
    =               reduce using rule 34 (referance -> ID .)
    [               reduce using rule 34 (referance -> ID .)
    ;               reduce using rule 34 (referance -> ID .)
    DOTDIV          reduce using rule 34 (referance -> ID .)
    DOTMUL          reduce using rule 34 (referance -> ID .)
    DOTSUB          reduce using rule 34 (referance -> ID .)
    DOTADD          reduce using rule 34 (referance -> ID .)
    DIV             reduce using rule 34 (referance -> ID .)
    MUL             reduce using rule 34 (referance -> ID .)
    SUB             reduce using rule 34 (referance -> ID .)
    ADD             reduce using rule 34 (referance -> ID .)
    '               reduce using rule 34 (referance -> ID .)
    NEQ             reduce using rule 34 (referance -> ID .)
    EQ              reduce using rule 34 (referance -> ID .)
    GTE             reduce using rule 34 (referance -> ID .)
    LTE             reduce using rule 34 (referance -> ID .)
    GT              reduce using rule 34 (referance -> ID .)
    LT              reduce using rule 34 (referance -> ID .)
    RETURN          reduce using rule 34 (referance -> ID .)
    CONTINUE        reduce using rule 34 (referance -> ID .)
    BREAK           reduce using rule 34 (referance -> ID .)
    {               reduce using rule 34 (referance -> ID .)
    PRINT           reduce using rule 34 (referance -> ID .)
    FOR             reduce using rule 34 (referance -> ID .)
    WHILE           reduce using rule 34 (referance -> ID .)
    IF              reduce using rule 34 (referance -> ID .)
    ID              reduce using rule 34 (referance -> ID .)
    $end            reduce using rule 34 (referance -> ID .)
    }               reduce using rule 34 (referance -> ID .)
    ELSE            reduce using rule 34 (referance -> ID .)
    )               reduce using rule 34 (referance -> ID .)
    ]               reduce using rule 34 (referance -> ID .)
    ,               reduce using rule 34 (referance -> ID .)
    :               reduce using rule 34 (referance -> ID .)


state 19

    (2) statements -> statements stmt .
    RETURN          reduce using rule 2 (statements -> statements stmt .)
    CONTINUE        reduce using rule 2 (statements -> statements stmt .)
    BREAK           reduce using rule 2 (statements -> statements stmt .)
    {               reduce using rule 2 (statements -> statements stmt .)
    ;               reduce using rule 2 (statements -> statements stmt .)
    PRINT           reduce using rule 2 (statements -> statements stmt .)
    FOR             reduce using rule 2 (statements -> statements stmt .)
    WHILE           reduce using rule 2 (statements -> statements stmt .)
    IF              reduce using rule 2 (statements -> statements stmt .)
    ID              reduce using rule 2 (statements -> statements stmt .)
    $end            reduce using rule 2 (statements -> statements stmt .)
    }               reduce using rule 2 (statements -> statements stmt .)


state 20

    (3) stmt -> RETURN expr . ;
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               shift and go to state 50
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DOTSUB          shift and go to state 53
    DOTADD          shift and go to state 54
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    SUB             shift and go to state 57
    ADD             shift and go to state 58
    '               shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61
    GTE             shift and go to state 62
    LTE             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65


state 21

    (35) expr -> ( . expr )
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 66
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 22

    (45) expr -> SUB . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 67
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 23

    (46) expr -> matrix_func .
    ;               reduce using rule 46 (expr -> matrix_func .)
    DOTDIV          reduce using rule 46 (expr -> matrix_func .)
    DOTMUL          reduce using rule 46 (expr -> matrix_func .)
    DOTSUB          reduce using rule 46 (expr -> matrix_func .)
    DOTADD          reduce using rule 46 (expr -> matrix_func .)
    DIV             reduce using rule 46 (expr -> matrix_func .)
    MUL             reduce using rule 46 (expr -> matrix_func .)
    SUB             reduce using rule 46 (expr -> matrix_func .)
    ADD             reduce using rule 46 (expr -> matrix_func .)
    '               reduce using rule 46 (expr -> matrix_func .)
    NEQ             reduce using rule 46 (expr -> matrix_func .)
    EQ              reduce using rule 46 (expr -> matrix_func .)
    GTE             reduce using rule 46 (expr -> matrix_func .)
    LTE             reduce using rule 46 (expr -> matrix_func .)
    GT              reduce using rule 46 (expr -> matrix_func .)
    LT              reduce using rule 46 (expr -> matrix_func .)
    )               reduce using rule 46 (expr -> matrix_func .)
    RETURN          reduce using rule 46 (expr -> matrix_func .)
    CONTINUE        reduce using rule 46 (expr -> matrix_func .)
    BREAK           reduce using rule 46 (expr -> matrix_func .)
    {               reduce using rule 46 (expr -> matrix_func .)
    PRINT           reduce using rule 46 (expr -> matrix_func .)
    FOR             reduce using rule 46 (expr -> matrix_func .)
    WHILE           reduce using rule 46 (expr -> matrix_func .)
    IF              reduce using rule 46 (expr -> matrix_func .)
    ID              reduce using rule 46 (expr -> matrix_func .)
    $end            reduce using rule 46 (expr -> matrix_func .)
    }               reduce using rule 46 (expr -> matrix_func .)
    ELSE            reduce using rule 46 (expr -> matrix_func .)


state 24

    (47) expr -> rel_expr .
    ;               reduce using rule 47 (expr -> rel_expr .)
    DOTDIV          reduce using rule 47 (expr -> rel_expr .)
    DOTMUL          reduce using rule 47 (expr -> rel_expr .)
    DOTSUB          reduce using rule 47 (expr -> rel_expr .)
    DOTADD          reduce using rule 47 (expr -> rel_expr .)
    DIV             reduce using rule 47 (expr -> rel_expr .)
    MUL             reduce using rule 47 (expr -> rel_expr .)
    SUB             reduce using rule 47 (expr -> rel_expr .)
    ADD             reduce using rule 47 (expr -> rel_expr .)
    '               reduce using rule 47 (expr -> rel_expr .)
    NEQ             reduce using rule 47 (expr -> rel_expr .)
    EQ              reduce using rule 47 (expr -> rel_expr .)
    GTE             reduce using rule 47 (expr -> rel_expr .)
    LTE             reduce using rule 47 (expr -> rel_expr .)
    GT              reduce using rule 47 (expr -> rel_expr .)
    LT              reduce using rule 47 (expr -> rel_expr .)
    )               reduce using rule 47 (expr -> rel_expr .)
    RETURN          reduce using rule 47 (expr -> rel_expr .)
    CONTINUE        reduce using rule 47 (expr -> rel_expr .)
    BREAK           reduce using rule 47 (expr -> rel_expr .)
    {               reduce using rule 47 (expr -> rel_expr .)
    PRINT           reduce using rule 47 (expr -> rel_expr .)
    FOR             reduce using rule 47 (expr -> rel_expr .)
    WHILE           reduce using rule 47 (expr -> rel_expr .)
    IF              reduce using rule 47 (expr -> rel_expr .)
    ID              reduce using rule 47 (expr -> rel_expr .)
    $end            reduce using rule 47 (expr -> rel_expr .)
    }               reduce using rule 47 (expr -> rel_expr .)
    ELSE            reduce using rule 47 (expr -> rel_expr .)


state 25

    (48) expr -> value .
    ;               reduce using rule 48 (expr -> value .)
    DOTDIV          reduce using rule 48 (expr -> value .)
    DOTMUL          reduce using rule 48 (expr -> value .)
    DOTSUB          reduce using rule 48 (expr -> value .)
    DOTADD          reduce using rule 48 (expr -> value .)
    DIV             reduce using rule 48 (expr -> value .)
    MUL             reduce using rule 48 (expr -> value .)
    SUB             reduce using rule 48 (expr -> value .)
    ADD             reduce using rule 48 (expr -> value .)
    '               reduce using rule 48 (expr -> value .)
    NEQ             reduce using rule 48 (expr -> value .)
    EQ              reduce using rule 48 (expr -> value .)
    GTE             reduce using rule 48 (expr -> value .)
    LTE             reduce using rule 48 (expr -> value .)
    GT              reduce using rule 48 (expr -> value .)
    LT              reduce using rule 48 (expr -> value .)
    )               reduce using rule 48 (expr -> value .)
    RETURN          reduce using rule 48 (expr -> value .)
    CONTINUE        reduce using rule 48 (expr -> value .)
    BREAK           reduce using rule 48 (expr -> value .)
    {               reduce using rule 48 (expr -> value .)
    PRINT           reduce using rule 48 (expr -> value .)
    FOR             reduce using rule 48 (expr -> value .)
    WHILE           reduce using rule 48 (expr -> value .)
    IF              reduce using rule 48 (expr -> value .)
    ID              reduce using rule 48 (expr -> value .)
    $end            reduce using rule 48 (expr -> value .)
    }               reduce using rule 48 (expr -> value .)
    ELSE            reduce using rule 48 (expr -> value .)


state 26

    (25) matrix_func -> EYE . ( value )
    (               shift and go to state 68


state 27

    (26) matrix_func -> ONES . ( value )
    (               shift and go to state 69


state 28

    (27) matrix_func -> ZEROS . ( value )
    (               shift and go to state 70


state 29

    (21) value -> referance .
    (33) referance -> referance . vector
    (32) vector -> . [ string_of_values ]
    ;               reduce using rule 21 (value -> referance .)
    DOTDIV          reduce using rule 21 (value -> referance .)
    DOTMUL          reduce using rule 21 (value -> referance .)
    DOTSUB          reduce using rule 21 (value -> referance .)
    DOTADD          reduce using rule 21 (value -> referance .)
    DIV             reduce using rule 21 (value -> referance .)
    MUL             reduce using rule 21 (value -> referance .)
    SUB             reduce using rule 21 (value -> referance .)
    ADD             reduce using rule 21 (value -> referance .)
    '               reduce using rule 21 (value -> referance .)
    NEQ             reduce using rule 21 (value -> referance .)
    EQ              reduce using rule 21 (value -> referance .)
    GTE             reduce using rule 21 (value -> referance .)
    LTE             reduce using rule 21 (value -> referance .)
    GT              reduce using rule 21 (value -> referance .)
    LT              reduce using rule 21 (value -> referance .)
    RETURN          reduce using rule 21 (value -> referance .)
    CONTINUE        reduce using rule 21 (value -> referance .)
    BREAK           reduce using rule 21 (value -> referance .)
    {               reduce using rule 21 (value -> referance .)
    PRINT           reduce using rule 21 (value -> referance .)
    FOR             reduce using rule 21 (value -> referance .)
    WHILE           reduce using rule 21 (value -> referance .)
    IF              reduce using rule 21 (value -> referance .)
    ID              reduce using rule 21 (value -> referance .)
    $end            reduce using rule 21 (value -> referance .)
    }               reduce using rule 21 (value -> referance .)
    ELSE            reduce using rule 21 (value -> referance .)
    )               reduce using rule 21 (value -> referance .)
    ]               reduce using rule 21 (value -> referance .)
    ,               reduce using rule 21 (value -> referance .)
    :               reduce using rule 21 (value -> referance .)
    [               shift and go to state 46

    vector                         shift and go to state 45

state 30

    (22) value -> String .
    ;               reduce using rule 22 (value -> String .)
    DOTDIV          reduce using rule 22 (value -> String .)
    DOTMUL          reduce using rule 22 (value -> String .)
    DOTSUB          reduce using rule 22 (value -> String .)
    DOTADD          reduce using rule 22 (value -> String .)
    DIV             reduce using rule 22 (value -> String .)
    MUL             reduce using rule 22 (value -> String .)
    SUB             reduce using rule 22 (value -> String .)
    ADD             reduce using rule 22 (value -> String .)
    '               reduce using rule 22 (value -> String .)
    NEQ             reduce using rule 22 (value -> String .)
    EQ              reduce using rule 22 (value -> String .)
    GTE             reduce using rule 22 (value -> String .)
    LTE             reduce using rule 22 (value -> String .)
    GT              reduce using rule 22 (value -> String .)
    LT              reduce using rule 22 (value -> String .)
    RETURN          reduce using rule 22 (value -> String .)
    CONTINUE        reduce using rule 22 (value -> String .)
    BREAK           reduce using rule 22 (value -> String .)
    {               reduce using rule 22 (value -> String .)
    PRINT           reduce using rule 22 (value -> String .)
    FOR             reduce using rule 22 (value -> String .)
    WHILE           reduce using rule 22 (value -> String .)
    IF              reduce using rule 22 (value -> String .)
    ID              reduce using rule 22 (value -> String .)
    $end            reduce using rule 22 (value -> String .)
    }               reduce using rule 22 (value -> String .)
    ELSE            reduce using rule 22 (value -> String .)
    )               reduce using rule 22 (value -> String .)
    ]               reduce using rule 22 (value -> String .)
    ,               reduce using rule 22 (value -> String .)
    :               reduce using rule 22 (value -> String .)


state 31

    (23) value -> FloatNum .
    ;               reduce using rule 23 (value -> FloatNum .)
    DOTDIV          reduce using rule 23 (value -> FloatNum .)
    DOTMUL          reduce using rule 23 (value -> FloatNum .)
    DOTSUB          reduce using rule 23 (value -> FloatNum .)
    DOTADD          reduce using rule 23 (value -> FloatNum .)
    DIV             reduce using rule 23 (value -> FloatNum .)
    MUL             reduce using rule 23 (value -> FloatNum .)
    SUB             reduce using rule 23 (value -> FloatNum .)
    ADD             reduce using rule 23 (value -> FloatNum .)
    '               reduce using rule 23 (value -> FloatNum .)
    NEQ             reduce using rule 23 (value -> FloatNum .)
    EQ              reduce using rule 23 (value -> FloatNum .)
    GTE             reduce using rule 23 (value -> FloatNum .)
    LTE             reduce using rule 23 (value -> FloatNum .)
    GT              reduce using rule 23 (value -> FloatNum .)
    LT              reduce using rule 23 (value -> FloatNum .)
    RETURN          reduce using rule 23 (value -> FloatNum .)
    CONTINUE        reduce using rule 23 (value -> FloatNum .)
    BREAK           reduce using rule 23 (value -> FloatNum .)
    {               reduce using rule 23 (value -> FloatNum .)
    PRINT           reduce using rule 23 (value -> FloatNum .)
    FOR             reduce using rule 23 (value -> FloatNum .)
    WHILE           reduce using rule 23 (value -> FloatNum .)
    IF              reduce using rule 23 (value -> FloatNum .)
    ID              reduce using rule 23 (value -> FloatNum .)
    $end            reduce using rule 23 (value -> FloatNum .)
    }               reduce using rule 23 (value -> FloatNum .)
    ELSE            reduce using rule 23 (value -> FloatNum .)
    )               reduce using rule 23 (value -> FloatNum .)
    ]               reduce using rule 23 (value -> FloatNum .)
    ,               reduce using rule 23 (value -> FloatNum .)
    :               reduce using rule 23 (value -> FloatNum .)


state 32

    (24) value -> IntNum .
    ;               reduce using rule 24 (value -> IntNum .)
    DOTDIV          reduce using rule 24 (value -> IntNum .)
    DOTMUL          reduce using rule 24 (value -> IntNum .)
    DOTSUB          reduce using rule 24 (value -> IntNum .)
    DOTADD          reduce using rule 24 (value -> IntNum .)
    DIV             reduce using rule 24 (value -> IntNum .)
    MUL             reduce using rule 24 (value -> IntNum .)
    SUB             reduce using rule 24 (value -> IntNum .)
    ADD             reduce using rule 24 (value -> IntNum .)
    '               reduce using rule 24 (value -> IntNum .)
    NEQ             reduce using rule 24 (value -> IntNum .)
    EQ              reduce using rule 24 (value -> IntNum .)
    GTE             reduce using rule 24 (value -> IntNum .)
    LTE             reduce using rule 24 (value -> IntNum .)
    GT              reduce using rule 24 (value -> IntNum .)
    LT              reduce using rule 24 (value -> IntNum .)
    RETURN          reduce using rule 24 (value -> IntNum .)
    CONTINUE        reduce using rule 24 (value -> IntNum .)
    BREAK           reduce using rule 24 (value -> IntNum .)
    {               reduce using rule 24 (value -> IntNum .)
    PRINT           reduce using rule 24 (value -> IntNum .)
    FOR             reduce using rule 24 (value -> IntNum .)
    WHILE           reduce using rule 24 (value -> IntNum .)
    IF              reduce using rule 24 (value -> IntNum .)
    ID              reduce using rule 24 (value -> IntNum .)
    $end            reduce using rule 24 (value -> IntNum .)
    }               reduce using rule 24 (value -> IntNum .)
    ELSE            reduce using rule 24 (value -> IntNum .)
    )               reduce using rule 24 (value -> IntNum .)
    ]               reduce using rule 24 (value -> IntNum .)
    ,               reduce using rule 24 (value -> IntNum .)
    :               reduce using rule 24 (value -> IntNum .)


state 33

    (20) String -> STRING .
    ;               reduce using rule 20 (String -> STRING .)
    DOTDIV          reduce using rule 20 (String -> STRING .)
    DOTMUL          reduce using rule 20 (String -> STRING .)
    DOTSUB          reduce using rule 20 (String -> STRING .)
    DOTADD          reduce using rule 20 (String -> STRING .)
    DIV             reduce using rule 20 (String -> STRING .)
    MUL             reduce using rule 20 (String -> STRING .)
    SUB             reduce using rule 20 (String -> STRING .)
    ADD             reduce using rule 20 (String -> STRING .)
    '               reduce using rule 20 (String -> STRING .)
    NEQ             reduce using rule 20 (String -> STRING .)
    EQ              reduce using rule 20 (String -> STRING .)
    GTE             reduce using rule 20 (String -> STRING .)
    LTE             reduce using rule 20 (String -> STRING .)
    GT              reduce using rule 20 (String -> STRING .)
    LT              reduce using rule 20 (String -> STRING .)
    RETURN          reduce using rule 20 (String -> STRING .)
    CONTINUE        reduce using rule 20 (String -> STRING .)
    BREAK           reduce using rule 20 (String -> STRING .)
    {               reduce using rule 20 (String -> STRING .)
    PRINT           reduce using rule 20 (String -> STRING .)
    FOR             reduce using rule 20 (String -> STRING .)
    WHILE           reduce using rule 20 (String -> STRING .)
    IF              reduce using rule 20 (String -> STRING .)
    ID              reduce using rule 20 (String -> STRING .)
    $end            reduce using rule 20 (String -> STRING .)
    }               reduce using rule 20 (String -> STRING .)
    ELSE            reduce using rule 20 (String -> STRING .)
    )               reduce using rule 20 (String -> STRING .)
    ]               reduce using rule 20 (String -> STRING .)
    ,               reduce using rule 20 (String -> STRING .)
    :               reduce using rule 20 (String -> STRING .)


state 34

    (19) FloatNum -> FLOATNUM .
    ;               reduce using rule 19 (FloatNum -> FLOATNUM .)
    DOTDIV          reduce using rule 19 (FloatNum -> FLOATNUM .)
    DOTMUL          reduce using rule 19 (FloatNum -> FLOATNUM .)
    DOTSUB          reduce using rule 19 (FloatNum -> FLOATNUM .)
    DOTADD          reduce using rule 19 (FloatNum -> FLOATNUM .)
    DIV             reduce using rule 19 (FloatNum -> FLOATNUM .)
    MUL             reduce using rule 19 (FloatNum -> FLOATNUM .)
    SUB             reduce using rule 19 (FloatNum -> FLOATNUM .)
    ADD             reduce using rule 19 (FloatNum -> FLOATNUM .)
    '               reduce using rule 19 (FloatNum -> FLOATNUM .)
    NEQ             reduce using rule 19 (FloatNum -> FLOATNUM .)
    EQ              reduce using rule 19 (FloatNum -> FLOATNUM .)
    GTE             reduce using rule 19 (FloatNum -> FLOATNUM .)
    LTE             reduce using rule 19 (FloatNum -> FLOATNUM .)
    GT              reduce using rule 19 (FloatNum -> FLOATNUM .)
    LT              reduce using rule 19 (FloatNum -> FLOATNUM .)
    RETURN          reduce using rule 19 (FloatNum -> FLOATNUM .)
    CONTINUE        reduce using rule 19 (FloatNum -> FLOATNUM .)
    BREAK           reduce using rule 19 (FloatNum -> FLOATNUM .)
    {               reduce using rule 19 (FloatNum -> FLOATNUM .)
    PRINT           reduce using rule 19 (FloatNum -> FLOATNUM .)
    FOR             reduce using rule 19 (FloatNum -> FLOATNUM .)
    WHILE           reduce using rule 19 (FloatNum -> FLOATNUM .)
    IF              reduce using rule 19 (FloatNum -> FLOATNUM .)
    ID              reduce using rule 19 (FloatNum -> FLOATNUM .)
    $end            reduce using rule 19 (FloatNum -> FLOATNUM .)
    }               reduce using rule 19 (FloatNum -> FLOATNUM .)
    ELSE            reduce using rule 19 (FloatNum -> FLOATNUM .)
    )               reduce using rule 19 (FloatNum -> FLOATNUM .)
    ]               reduce using rule 19 (FloatNum -> FLOATNUM .)
    ,               reduce using rule 19 (FloatNum -> FLOATNUM .)
    :               reduce using rule 19 (FloatNum -> FLOATNUM .)


state 35

    (18) IntNum -> INTNUM .
    ;               reduce using rule 18 (IntNum -> INTNUM .)
    DOTDIV          reduce using rule 18 (IntNum -> INTNUM .)
    DOTMUL          reduce using rule 18 (IntNum -> INTNUM .)
    DOTSUB          reduce using rule 18 (IntNum -> INTNUM .)
    DOTADD          reduce using rule 18 (IntNum -> INTNUM .)
    DIV             reduce using rule 18 (IntNum -> INTNUM .)
    MUL             reduce using rule 18 (IntNum -> INTNUM .)
    SUB             reduce using rule 18 (IntNum -> INTNUM .)
    ADD             reduce using rule 18 (IntNum -> INTNUM .)
    '               reduce using rule 18 (IntNum -> INTNUM .)
    NEQ             reduce using rule 18 (IntNum -> INTNUM .)
    EQ              reduce using rule 18 (IntNum -> INTNUM .)
    GTE             reduce using rule 18 (IntNum -> INTNUM .)
    LTE             reduce using rule 18 (IntNum -> INTNUM .)
    GT              reduce using rule 18 (IntNum -> INTNUM .)
    LT              reduce using rule 18 (IntNum -> INTNUM .)
    RETURN          reduce using rule 18 (IntNum -> INTNUM .)
    CONTINUE        reduce using rule 18 (IntNum -> INTNUM .)
    BREAK           reduce using rule 18 (IntNum -> INTNUM .)
    {               reduce using rule 18 (IntNum -> INTNUM .)
    PRINT           reduce using rule 18 (IntNum -> INTNUM .)
    FOR             reduce using rule 18 (IntNum -> INTNUM .)
    WHILE           reduce using rule 18 (IntNum -> INTNUM .)
    IF              reduce using rule 18 (IntNum -> INTNUM .)
    ID              reduce using rule 18 (IntNum -> INTNUM .)
    $end            reduce using rule 18 (IntNum -> INTNUM .)
    }               reduce using rule 18 (IntNum -> INTNUM .)
    ELSE            reduce using rule 18 (IntNum -> INTNUM .)
    )               reduce using rule 18 (IntNum -> INTNUM .)
    ]               reduce using rule 18 (IntNum -> INTNUM .)
    ,               reduce using rule 18 (IntNum -> INTNUM .)
    :               reduce using rule 18 (IntNum -> INTNUM .)


state 36

    (4) stmt -> CONTINUE ; .
    RETURN          reduce using rule 4 (stmt -> CONTINUE ; .)
    CONTINUE        reduce using rule 4 (stmt -> CONTINUE ; .)
    BREAK           reduce using rule 4 (stmt -> CONTINUE ; .)
    {               reduce using rule 4 (stmt -> CONTINUE ; .)
    ;               reduce using rule 4 (stmt -> CONTINUE ; .)
    PRINT           reduce using rule 4 (stmt -> CONTINUE ; .)
    FOR             reduce using rule 4 (stmt -> CONTINUE ; .)
    WHILE           reduce using rule 4 (stmt -> CONTINUE ; .)
    IF              reduce using rule 4 (stmt -> CONTINUE ; .)
    ID              reduce using rule 4 (stmt -> CONTINUE ; .)
    $end            reduce using rule 4 (stmt -> CONTINUE ; .)
    }               reduce using rule 4 (stmt -> CONTINUE ; .)
    ELSE            reduce using rule 4 (stmt -> CONTINUE ; .)


state 37

    (5) stmt -> BREAK ; .
    RETURN          reduce using rule 5 (stmt -> BREAK ; .)
    CONTINUE        reduce using rule 5 (stmt -> BREAK ; .)
    BREAK           reduce using rule 5 (stmt -> BREAK ; .)
    {               reduce using rule 5 (stmt -> BREAK ; .)
    ;               reduce using rule 5 (stmt -> BREAK ; .)
    PRINT           reduce using rule 5 (stmt -> BREAK ; .)
    FOR             reduce using rule 5 (stmt -> BREAK ; .)
    WHILE           reduce using rule 5 (stmt -> BREAK ; .)
    IF              reduce using rule 5 (stmt -> BREAK ; .)
    ID              reduce using rule 5 (stmt -> BREAK ; .)
    $end            reduce using rule 5 (stmt -> BREAK ; .)
    }               reduce using rule 5 (stmt -> BREAK ; .)
    ELSE            reduce using rule 5 (stmt -> BREAK ; .)


state 38

    (11) stmt -> { statements . }
    (2) statements -> statements . stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (17) print_stmt -> . PRINT value
    (55) assign_expr -> . referance DIVASSIGN expr
    (56) assign_expr -> . referance MULASSIGN expr
    (57) assign_expr -> . referance SUBASSIGN expr
    (58) assign_expr -> . referance ADDASSIGN expr
    (59) assign_expr -> . referance = expr
    (15) for_stmt -> . FOR referance = value : value stmt
    (16) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (33) referance -> . referance vector
    (34) referance -> . ID
    }               shift and go to state 71
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    stmt                           shift and go to state 19
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11
    referance                      shift and go to state 14

state 39

    (17) print_stmt -> PRINT value .
    RETURN          reduce using rule 17 (print_stmt -> PRINT value .)
    CONTINUE        reduce using rule 17 (print_stmt -> PRINT value .)
    BREAK           reduce using rule 17 (print_stmt -> PRINT value .)
    {               reduce using rule 17 (print_stmt -> PRINT value .)
    ;               reduce using rule 17 (print_stmt -> PRINT value .)
    PRINT           reduce using rule 17 (print_stmt -> PRINT value .)
    FOR             reduce using rule 17 (print_stmt -> PRINT value .)
    WHILE           reduce using rule 17 (print_stmt -> PRINT value .)
    IF              reduce using rule 17 (print_stmt -> PRINT value .)
    ID              reduce using rule 17 (print_stmt -> PRINT value .)
    $end            reduce using rule 17 (print_stmt -> PRINT value .)
    }               reduce using rule 17 (print_stmt -> PRINT value .)
    ELSE            reduce using rule 17 (print_stmt -> PRINT value .)


state 40

    (55) assign_expr -> referance DIVASSIGN . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    referance                      shift and go to state 29
    expr                           shift and go to state 72
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 41

    (56) assign_expr -> referance MULASSIGN . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    referance                      shift and go to state 29
    expr                           shift and go to state 73
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 42

    (57) assign_expr -> referance SUBASSIGN . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    referance                      shift and go to state 29
    expr                           shift and go to state 74
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 43

    (58) assign_expr -> referance ADDASSIGN . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    referance                      shift and go to state 29
    expr                           shift and go to state 75
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 44

    (59) assign_expr -> referance = . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    referance                      shift and go to state 29
    expr                           shift and go to state 76
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 45

    (33) referance -> referance vector .
    DIVASSIGN       reduce using rule 33 (referance -> referance vector .)
    MULASSIGN       reduce using rule 33 (referance -> referance vector .)
    SUBASSIGN       reduce using rule 33 (referance -> referance vector .)
    ADDASSIGN       reduce using rule 33 (referance -> referance vector .)
    =               reduce using rule 33 (referance -> referance vector .)
    [               reduce using rule 33 (referance -> referance vector .)
    ;               reduce using rule 33 (referance -> referance vector .)
    DOTDIV          reduce using rule 33 (referance -> referance vector .)
    DOTMUL          reduce using rule 33 (referance -> referance vector .)
    DOTSUB          reduce using rule 33 (referance -> referance vector .)
    DOTADD          reduce using rule 33 (referance -> referance vector .)
    DIV             reduce using rule 33 (referance -> referance vector .)
    MUL             reduce using rule 33 (referance -> referance vector .)
    SUB             reduce using rule 33 (referance -> referance vector .)
    ADD             reduce using rule 33 (referance -> referance vector .)
    '               reduce using rule 33 (referance -> referance vector .)
    NEQ             reduce using rule 33 (referance -> referance vector .)
    EQ              reduce using rule 33 (referance -> referance vector .)
    GTE             reduce using rule 33 (referance -> referance vector .)
    LTE             reduce using rule 33 (referance -> referance vector .)
    GT              reduce using rule 33 (referance -> referance vector .)
    LT              reduce using rule 33 (referance -> referance vector .)
    RETURN          reduce using rule 33 (referance -> referance vector .)
    CONTINUE        reduce using rule 33 (referance -> referance vector .)
    BREAK           reduce using rule 33 (referance -> referance vector .)
    {               reduce using rule 33 (referance -> referance vector .)
    PRINT           reduce using rule 33 (referance -> referance vector .)
    FOR             reduce using rule 33 (referance -> referance vector .)
    WHILE           reduce using rule 33 (referance -> referance vector .)
    IF              reduce using rule 33 (referance -> referance vector .)
    ID              reduce using rule 33 (referance -> referance vector .)
    $end            reduce using rule 33 (referance -> referance vector .)
    }               reduce using rule 33 (referance -> referance vector .)
    ELSE            reduce using rule 33 (referance -> referance vector .)
    )               reduce using rule 33 (referance -> referance vector .)
    ]               reduce using rule 33 (referance -> referance vector .)
    ,               reduce using rule 33 (referance -> referance vector .)
    :               reduce using rule 33 (referance -> referance vector .)


state 46

    (32) vector -> [ . string_of_values ]
    (28) string_of_values -> . string_of_values , vector
    (29) string_of_values -> . vector
    (30) string_of_values -> . string_of_values , value
    (31) string_of_values -> . value
    (32) vector -> . [ string_of_values ]
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    [               shift and go to state 46
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    string_of_values               shift and go to state 77
    vector                         shift and go to state 78
    value                          shift and go to state 79
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 47

    (15) for_stmt -> FOR referance . = value : value stmt
    (33) referance -> referance . vector
    (32) vector -> . [ string_of_values ]
    =               shift and go to state 80
    [               shift and go to state 46

    vector                         shift and go to state 45

state 48

    (16) while_stmt -> WHILE ( . rel_expr ) stmt
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    rel_expr                       shift and go to state 81
    expr                           shift and go to state 82
    matrix_func                    shift and go to state 23
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 49

    (13) if_stmt -> IF ( . rel_expr ) stmt
    (14) if_stmt -> IF ( . rel_expr ) stmt ELSE stmt
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    rel_expr                       shift and go to state 83
    expr                           shift and go to state 82
    matrix_func                    shift and go to state 23
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 50

    (3) stmt -> RETURN expr ; .
    RETURN          reduce using rule 3 (stmt -> RETURN expr ; .)
    CONTINUE        reduce using rule 3 (stmt -> RETURN expr ; .)
    BREAK           reduce using rule 3 (stmt -> RETURN expr ; .)
    {               reduce using rule 3 (stmt -> RETURN expr ; .)
    ;               reduce using rule 3 (stmt -> RETURN expr ; .)
    PRINT           reduce using rule 3 (stmt -> RETURN expr ; .)
    FOR             reduce using rule 3 (stmt -> RETURN expr ; .)
    WHILE           reduce using rule 3 (stmt -> RETURN expr ; .)
    IF              reduce using rule 3 (stmt -> RETURN expr ; .)
    ID              reduce using rule 3 (stmt -> RETURN expr ; .)
    $end            reduce using rule 3 (stmt -> RETURN expr ; .)
    }               reduce using rule 3 (stmt -> RETURN expr ; .)
    ELSE            reduce using rule 3 (stmt -> RETURN expr ; .)


state 51

    (36) expr -> expr DOTDIV . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 84
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 52

    (37) expr -> expr DOTMUL . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 85
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 53

    (38) expr -> expr DOTSUB . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 86
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 54

    (39) expr -> expr DOTADD . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 87
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 55

    (40) expr -> expr DIV . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 88
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 56

    (41) expr -> expr MUL . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 89
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 57

    (42) expr -> expr SUB . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 90
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 58

    (43) expr -> expr ADD . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 91
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 59

    (44) expr -> expr ' .
    ;               reduce using rule 44 (expr -> expr ' .)
    DOTDIV          reduce using rule 44 (expr -> expr ' .)
    DOTMUL          reduce using rule 44 (expr -> expr ' .)
    DOTSUB          reduce using rule 44 (expr -> expr ' .)
    DOTADD          reduce using rule 44 (expr -> expr ' .)
    DIV             reduce using rule 44 (expr -> expr ' .)
    MUL             reduce using rule 44 (expr -> expr ' .)
    SUB             reduce using rule 44 (expr -> expr ' .)
    ADD             reduce using rule 44 (expr -> expr ' .)
    '               reduce using rule 44 (expr -> expr ' .)
    NEQ             reduce using rule 44 (expr -> expr ' .)
    EQ              reduce using rule 44 (expr -> expr ' .)
    GTE             reduce using rule 44 (expr -> expr ' .)
    LTE             reduce using rule 44 (expr -> expr ' .)
    GT              reduce using rule 44 (expr -> expr ' .)
    LT              reduce using rule 44 (expr -> expr ' .)
    )               reduce using rule 44 (expr -> expr ' .)
    RETURN          reduce using rule 44 (expr -> expr ' .)
    CONTINUE        reduce using rule 44 (expr -> expr ' .)
    BREAK           reduce using rule 44 (expr -> expr ' .)
    {               reduce using rule 44 (expr -> expr ' .)
    PRINT           reduce using rule 44 (expr -> expr ' .)
    FOR             reduce using rule 44 (expr -> expr ' .)
    WHILE           reduce using rule 44 (expr -> expr ' .)
    IF              reduce using rule 44 (expr -> expr ' .)
    ID              reduce using rule 44 (expr -> expr ' .)
    $end            reduce using rule 44 (expr -> expr ' .)
    }               reduce using rule 44 (expr -> expr ' .)
    ELSE            reduce using rule 44 (expr -> expr ' .)


state 60

    (49) rel_expr -> expr NEQ . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 92
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 61

    (50) rel_expr -> expr EQ . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 93
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 62

    (51) rel_expr -> expr GTE . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 94
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 63

    (52) rel_expr -> expr LTE . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 95
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 64

    (53) rel_expr -> expr GT . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 96
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 65

    (54) rel_expr -> expr LT . expr
    (35) expr -> . ( expr )
    (36) expr -> . expr DOTDIV expr
    (37) expr -> . expr DOTMUL expr
    (38) expr -> . expr DOTSUB expr
    (39) expr -> . expr DOTADD expr
    (40) expr -> . expr DIV expr
    (41) expr -> . expr MUL expr
    (42) expr -> . expr SUB expr
    (43) expr -> . expr ADD expr
    (44) expr -> . expr '
    (45) expr -> . SUB expr
    (46) expr -> . matrix_func
    (47) expr -> . rel_expr
    (48) expr -> . value
    (25) matrix_func -> . EYE ( value )
    (26) matrix_func -> . ONES ( value )
    (27) matrix_func -> . ZEROS ( value )
    (49) rel_expr -> . expr NEQ expr
    (50) rel_expr -> . expr EQ expr
    (51) rel_expr -> . expr GTE expr
    (52) rel_expr -> . expr LTE expr
    (53) rel_expr -> . expr GT expr
    (54) rel_expr -> . expr LT expr
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    (               shift and go to state 21
    SUB             shift and go to state 22
    EYE             shift and go to state 26
    ONES            shift and go to state 27
    ZEROS           shift and go to state 28
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    expr                           shift and go to state 97
    matrix_func                    shift and go to state 23
    rel_expr                       shift and go to state 24
    value                          shift and go to state 25
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 66

    (35) expr -> ( expr . )
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    )               shift and go to state 98
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DOTSUB          shift and go to state 53
    DOTADD          shift and go to state 54
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    SUB             shift and go to state 57
    ADD             shift and go to state 58
    '               shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61
    GTE             shift and go to state 62
    LTE             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65


state 67

    (45) expr -> SUB expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               reduce using rule 45 (expr -> SUB expr .)
    DOTSUB          reduce using rule 45 (expr -> SUB expr .)
    DOTADD          reduce using rule 45 (expr -> SUB expr .)
    SUB             reduce using rule 45 (expr -> SUB expr .)
    ADD             reduce using rule 45 (expr -> SUB expr .)
    NEQ             reduce using rule 45 (expr -> SUB expr .)
    EQ              reduce using rule 45 (expr -> SUB expr .)
    GTE             reduce using rule 45 (expr -> SUB expr .)
    LTE             reduce using rule 45 (expr -> SUB expr .)
    GT              reduce using rule 45 (expr -> SUB expr .)
    LT              reduce using rule 45 (expr -> SUB expr .)
    )               reduce using rule 45 (expr -> SUB expr .)
    RETURN          reduce using rule 45 (expr -> SUB expr .)
    CONTINUE        reduce using rule 45 (expr -> SUB expr .)
    BREAK           reduce using rule 45 (expr -> SUB expr .)
    {               reduce using rule 45 (expr -> SUB expr .)
    PRINT           reduce using rule 45 (expr -> SUB expr .)
    FOR             reduce using rule 45 (expr -> SUB expr .)
    WHILE           reduce using rule 45 (expr -> SUB expr .)
    IF              reduce using rule 45 (expr -> SUB expr .)
    ID              reduce using rule 45 (expr -> SUB expr .)
    $end            reduce using rule 45 (expr -> SUB expr .)
    }               reduce using rule 45 (expr -> SUB expr .)
    ELSE            reduce using rule 45 (expr -> SUB expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    '               shift and go to state 59


state 68

    (25) matrix_func -> EYE ( . value )
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    value                          shift and go to state 99
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 69

    (26) matrix_func -> ONES ( . value )
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    value                          shift and go to state 100
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 70

    (27) matrix_func -> ZEROS ( . value )
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    value                          shift and go to state 101
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 71

    (11) stmt -> { statements } .
    RETURN          reduce using rule 11 (stmt -> { statements } .)
    CONTINUE        reduce using rule 11 (stmt -> { statements } .)
    BREAK           reduce using rule 11 (stmt -> { statements } .)
    {               reduce using rule 11 (stmt -> { statements } .)
    ;               reduce using rule 11 (stmt -> { statements } .)
    PRINT           reduce using rule 11 (stmt -> { statements } .)
    FOR             reduce using rule 11 (stmt -> { statements } .)
    WHILE           reduce using rule 11 (stmt -> { statements } .)
    IF              reduce using rule 11 (stmt -> { statements } .)
    ID              reduce using rule 11 (stmt -> { statements } .)
    $end            reduce using rule 11 (stmt -> { statements } .)
    }               reduce using rule 11 (stmt -> { statements } .)
    ELSE            reduce using rule 11 (stmt -> { statements } .)


state 72

    (55) assign_expr -> referance DIVASSIGN expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    RETURN          reduce using rule 55 (assign_expr -> referance DIVASSIGN expr .)
    CONTINUE        reduce using rule 55 (assign_expr -> referance DIVASSIGN expr .)
    BREAK           reduce using rule 55 (assign_expr -> referance DIVASSIGN expr .)
    {               reduce using rule 55 (assign_expr -> referance DIVASSIGN expr .)
    ;               reduce using rule 55 (assign_expr -> referance DIVASSIGN expr .)
    PRINT           reduce using rule 55 (assign_expr -> referance DIVASSIGN expr .)
    FOR             reduce using rule 55 (assign_expr -> referance DIVASSIGN expr .)
    WHILE           reduce using rule 55 (assign_expr -> referance DIVASSIGN expr .)
    IF              reduce using rule 55 (assign_expr -> referance DIVASSIGN expr .)
    ID              reduce using rule 55 (assign_expr -> referance DIVASSIGN expr .)
    $end            reduce using rule 55 (assign_expr -> referance DIVASSIGN expr .)
    }               reduce using rule 55 (assign_expr -> referance DIVASSIGN expr .)
    ELSE            reduce using rule 55 (assign_expr -> referance DIVASSIGN expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DOTSUB          shift and go to state 53
    DOTADD          shift and go to state 54
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    SUB             shift and go to state 57
    ADD             shift and go to state 58
    '               shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61
    GTE             shift and go to state 62
    LTE             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65


state 73

    (56) assign_expr -> referance MULASSIGN expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    RETURN          reduce using rule 56 (assign_expr -> referance MULASSIGN expr .)
    CONTINUE        reduce using rule 56 (assign_expr -> referance MULASSIGN expr .)
    BREAK           reduce using rule 56 (assign_expr -> referance MULASSIGN expr .)
    {               reduce using rule 56 (assign_expr -> referance MULASSIGN expr .)
    ;               reduce using rule 56 (assign_expr -> referance MULASSIGN expr .)
    PRINT           reduce using rule 56 (assign_expr -> referance MULASSIGN expr .)
    FOR             reduce using rule 56 (assign_expr -> referance MULASSIGN expr .)
    WHILE           reduce using rule 56 (assign_expr -> referance MULASSIGN expr .)
    IF              reduce using rule 56 (assign_expr -> referance MULASSIGN expr .)
    ID              reduce using rule 56 (assign_expr -> referance MULASSIGN expr .)
    $end            reduce using rule 56 (assign_expr -> referance MULASSIGN expr .)
    }               reduce using rule 56 (assign_expr -> referance MULASSIGN expr .)
    ELSE            reduce using rule 56 (assign_expr -> referance MULASSIGN expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DOTSUB          shift and go to state 53
    DOTADD          shift and go to state 54
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    SUB             shift and go to state 57
    ADD             shift and go to state 58
    '               shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61
    GTE             shift and go to state 62
    LTE             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65


state 74

    (57) assign_expr -> referance SUBASSIGN expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    RETURN          reduce using rule 57 (assign_expr -> referance SUBASSIGN expr .)
    CONTINUE        reduce using rule 57 (assign_expr -> referance SUBASSIGN expr .)
    BREAK           reduce using rule 57 (assign_expr -> referance SUBASSIGN expr .)
    {               reduce using rule 57 (assign_expr -> referance SUBASSIGN expr .)
    ;               reduce using rule 57 (assign_expr -> referance SUBASSIGN expr .)
    PRINT           reduce using rule 57 (assign_expr -> referance SUBASSIGN expr .)
    FOR             reduce using rule 57 (assign_expr -> referance SUBASSIGN expr .)
    WHILE           reduce using rule 57 (assign_expr -> referance SUBASSIGN expr .)
    IF              reduce using rule 57 (assign_expr -> referance SUBASSIGN expr .)
    ID              reduce using rule 57 (assign_expr -> referance SUBASSIGN expr .)
    $end            reduce using rule 57 (assign_expr -> referance SUBASSIGN expr .)
    }               reduce using rule 57 (assign_expr -> referance SUBASSIGN expr .)
    ELSE            reduce using rule 57 (assign_expr -> referance SUBASSIGN expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DOTSUB          shift and go to state 53
    DOTADD          shift and go to state 54
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    SUB             shift and go to state 57
    ADD             shift and go to state 58
    '               shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61
    GTE             shift and go to state 62
    LTE             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65


state 75

    (58) assign_expr -> referance ADDASSIGN expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    RETURN          reduce using rule 58 (assign_expr -> referance ADDASSIGN expr .)
    CONTINUE        reduce using rule 58 (assign_expr -> referance ADDASSIGN expr .)
    BREAK           reduce using rule 58 (assign_expr -> referance ADDASSIGN expr .)
    {               reduce using rule 58 (assign_expr -> referance ADDASSIGN expr .)
    ;               reduce using rule 58 (assign_expr -> referance ADDASSIGN expr .)
    PRINT           reduce using rule 58 (assign_expr -> referance ADDASSIGN expr .)
    FOR             reduce using rule 58 (assign_expr -> referance ADDASSIGN expr .)
    WHILE           reduce using rule 58 (assign_expr -> referance ADDASSIGN expr .)
    IF              reduce using rule 58 (assign_expr -> referance ADDASSIGN expr .)
    ID              reduce using rule 58 (assign_expr -> referance ADDASSIGN expr .)
    $end            reduce using rule 58 (assign_expr -> referance ADDASSIGN expr .)
    }               reduce using rule 58 (assign_expr -> referance ADDASSIGN expr .)
    ELSE            reduce using rule 58 (assign_expr -> referance ADDASSIGN expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DOTSUB          shift and go to state 53
    DOTADD          shift and go to state 54
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    SUB             shift and go to state 57
    ADD             shift and go to state 58
    '               shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61
    GTE             shift and go to state 62
    LTE             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65


state 76

    (59) assign_expr -> referance = expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    RETURN          reduce using rule 59 (assign_expr -> referance = expr .)
    CONTINUE        reduce using rule 59 (assign_expr -> referance = expr .)
    BREAK           reduce using rule 59 (assign_expr -> referance = expr .)
    {               reduce using rule 59 (assign_expr -> referance = expr .)
    ;               reduce using rule 59 (assign_expr -> referance = expr .)
    PRINT           reduce using rule 59 (assign_expr -> referance = expr .)
    FOR             reduce using rule 59 (assign_expr -> referance = expr .)
    WHILE           reduce using rule 59 (assign_expr -> referance = expr .)
    IF              reduce using rule 59 (assign_expr -> referance = expr .)
    ID              reduce using rule 59 (assign_expr -> referance = expr .)
    $end            reduce using rule 59 (assign_expr -> referance = expr .)
    }               reduce using rule 59 (assign_expr -> referance = expr .)
    ELSE            reduce using rule 59 (assign_expr -> referance = expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DOTSUB          shift and go to state 53
    DOTADD          shift and go to state 54
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    SUB             shift and go to state 57
    ADD             shift and go to state 58
    '               shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61
    GTE             shift and go to state 62
    LTE             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65


state 77

    (32) vector -> [ string_of_values . ]
    (28) string_of_values -> string_of_values . , vector
    (30) string_of_values -> string_of_values . , value
    ]               shift and go to state 102
    ,               shift and go to state 103


state 78

    (29) string_of_values -> vector .
    ]               reduce using rule 29 (string_of_values -> vector .)
    ,               reduce using rule 29 (string_of_values -> vector .)


state 79

    (31) string_of_values -> value .
    ]               reduce using rule 31 (string_of_values -> value .)
    ,               reduce using rule 31 (string_of_values -> value .)


state 80

    (15) for_stmt -> FOR referance = . value : value stmt
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    referance                      shift and go to state 29
    value                          shift and go to state 104
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 81

    (16) while_stmt -> WHILE ( rel_expr . ) stmt
    (47) expr -> rel_expr .
    )               shift and go to state 105
    NEQ             reduce using rule 47 (expr -> rel_expr .)
    EQ              reduce using rule 47 (expr -> rel_expr .)
    GTE             reduce using rule 47 (expr -> rel_expr .)
    LTE             reduce using rule 47 (expr -> rel_expr .)
    GT              reduce using rule 47 (expr -> rel_expr .)
    LT              reduce using rule 47 (expr -> rel_expr .)
    DOTDIV          reduce using rule 47 (expr -> rel_expr .)
    DOTMUL          reduce using rule 47 (expr -> rel_expr .)
    DOTSUB          reduce using rule 47 (expr -> rel_expr .)
    DOTADD          reduce using rule 47 (expr -> rel_expr .)
    DIV             reduce using rule 47 (expr -> rel_expr .)
    MUL             reduce using rule 47 (expr -> rel_expr .)
    SUB             reduce using rule 47 (expr -> rel_expr .)
    ADD             reduce using rule 47 (expr -> rel_expr .)
    '               reduce using rule 47 (expr -> rel_expr .)


state 82

    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    NEQ             shift and go to state 60
    EQ              shift and go to state 61
    GTE             shift and go to state 62
    LTE             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DOTSUB          shift and go to state 53
    DOTADD          shift and go to state 54
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    SUB             shift and go to state 57
    ADD             shift and go to state 58
    '               shift and go to state 59


state 83

    (13) if_stmt -> IF ( rel_expr . ) stmt
    (14) if_stmt -> IF ( rel_expr . ) stmt ELSE stmt
    (47) expr -> rel_expr .
    )               shift and go to state 106
    NEQ             reduce using rule 47 (expr -> rel_expr .)
    EQ              reduce using rule 47 (expr -> rel_expr .)
    GTE             reduce using rule 47 (expr -> rel_expr .)
    LTE             reduce using rule 47 (expr -> rel_expr .)
    GT              reduce using rule 47 (expr -> rel_expr .)
    LT              reduce using rule 47 (expr -> rel_expr .)
    DOTDIV          reduce using rule 47 (expr -> rel_expr .)
    DOTMUL          reduce using rule 47 (expr -> rel_expr .)
    DOTSUB          reduce using rule 47 (expr -> rel_expr .)
    DOTADD          reduce using rule 47 (expr -> rel_expr .)
    DIV             reduce using rule 47 (expr -> rel_expr .)
    MUL             reduce using rule 47 (expr -> rel_expr .)
    SUB             reduce using rule 47 (expr -> rel_expr .)
    ADD             reduce using rule 47 (expr -> rel_expr .)
    '               reduce using rule 47 (expr -> rel_expr .)


state 84

    (36) expr -> expr DOTDIV expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               reduce using rule 36 (expr -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 36 (expr -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 36 (expr -> expr DOTDIV expr .)
    DOTSUB          reduce using rule 36 (expr -> expr DOTDIV expr .)
    DOTADD          reduce using rule 36 (expr -> expr DOTDIV expr .)
    DIV             reduce using rule 36 (expr -> expr DOTDIV expr .)
    MUL             reduce using rule 36 (expr -> expr DOTDIV expr .)
    SUB             reduce using rule 36 (expr -> expr DOTDIV expr .)
    ADD             reduce using rule 36 (expr -> expr DOTDIV expr .)
    NEQ             reduce using rule 36 (expr -> expr DOTDIV expr .)
    EQ              reduce using rule 36 (expr -> expr DOTDIV expr .)
    GTE             reduce using rule 36 (expr -> expr DOTDIV expr .)
    LTE             reduce using rule 36 (expr -> expr DOTDIV expr .)
    GT              reduce using rule 36 (expr -> expr DOTDIV expr .)
    LT              reduce using rule 36 (expr -> expr DOTDIV expr .)
    )               reduce using rule 36 (expr -> expr DOTDIV expr .)
    RETURN          reduce using rule 36 (expr -> expr DOTDIV expr .)
    CONTINUE        reduce using rule 36 (expr -> expr DOTDIV expr .)
    BREAK           reduce using rule 36 (expr -> expr DOTDIV expr .)
    {               reduce using rule 36 (expr -> expr DOTDIV expr .)
    PRINT           reduce using rule 36 (expr -> expr DOTDIV expr .)
    FOR             reduce using rule 36 (expr -> expr DOTDIV expr .)
    WHILE           reduce using rule 36 (expr -> expr DOTDIV expr .)
    IF              reduce using rule 36 (expr -> expr DOTDIV expr .)
    ID              reduce using rule 36 (expr -> expr DOTDIV expr .)
    $end            reduce using rule 36 (expr -> expr DOTDIV expr .)
    }               reduce using rule 36 (expr -> expr DOTDIV expr .)
    ELSE            reduce using rule 36 (expr -> expr DOTDIV expr .)
    '               shift and go to state 59


state 85

    (37) expr -> expr DOTMUL expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               reduce using rule 37 (expr -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 37 (expr -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 37 (expr -> expr DOTMUL expr .)
    DOTSUB          reduce using rule 37 (expr -> expr DOTMUL expr .)
    DOTADD          reduce using rule 37 (expr -> expr DOTMUL expr .)
    DIV             reduce using rule 37 (expr -> expr DOTMUL expr .)
    MUL             reduce using rule 37 (expr -> expr DOTMUL expr .)
    SUB             reduce using rule 37 (expr -> expr DOTMUL expr .)
    ADD             reduce using rule 37 (expr -> expr DOTMUL expr .)
    NEQ             reduce using rule 37 (expr -> expr DOTMUL expr .)
    EQ              reduce using rule 37 (expr -> expr DOTMUL expr .)
    GTE             reduce using rule 37 (expr -> expr DOTMUL expr .)
    LTE             reduce using rule 37 (expr -> expr DOTMUL expr .)
    GT              reduce using rule 37 (expr -> expr DOTMUL expr .)
    LT              reduce using rule 37 (expr -> expr DOTMUL expr .)
    )               reduce using rule 37 (expr -> expr DOTMUL expr .)
    RETURN          reduce using rule 37 (expr -> expr DOTMUL expr .)
    CONTINUE        reduce using rule 37 (expr -> expr DOTMUL expr .)
    BREAK           reduce using rule 37 (expr -> expr DOTMUL expr .)
    {               reduce using rule 37 (expr -> expr DOTMUL expr .)
    PRINT           reduce using rule 37 (expr -> expr DOTMUL expr .)
    FOR             reduce using rule 37 (expr -> expr DOTMUL expr .)
    WHILE           reduce using rule 37 (expr -> expr DOTMUL expr .)
    IF              reduce using rule 37 (expr -> expr DOTMUL expr .)
    ID              reduce using rule 37 (expr -> expr DOTMUL expr .)
    $end            reduce using rule 37 (expr -> expr DOTMUL expr .)
    }               reduce using rule 37 (expr -> expr DOTMUL expr .)
    ELSE            reduce using rule 37 (expr -> expr DOTMUL expr .)
    '               shift and go to state 59


state 86

    (38) expr -> expr DOTSUB expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               reduce using rule 38 (expr -> expr DOTSUB expr .)
    DOTSUB          reduce using rule 38 (expr -> expr DOTSUB expr .)
    DOTADD          reduce using rule 38 (expr -> expr DOTSUB expr .)
    SUB             reduce using rule 38 (expr -> expr DOTSUB expr .)
    ADD             reduce using rule 38 (expr -> expr DOTSUB expr .)
    NEQ             reduce using rule 38 (expr -> expr DOTSUB expr .)
    EQ              reduce using rule 38 (expr -> expr DOTSUB expr .)
    GTE             reduce using rule 38 (expr -> expr DOTSUB expr .)
    LTE             reduce using rule 38 (expr -> expr DOTSUB expr .)
    GT              reduce using rule 38 (expr -> expr DOTSUB expr .)
    LT              reduce using rule 38 (expr -> expr DOTSUB expr .)
    )               reduce using rule 38 (expr -> expr DOTSUB expr .)
    RETURN          reduce using rule 38 (expr -> expr DOTSUB expr .)
    CONTINUE        reduce using rule 38 (expr -> expr DOTSUB expr .)
    BREAK           reduce using rule 38 (expr -> expr DOTSUB expr .)
    {               reduce using rule 38 (expr -> expr DOTSUB expr .)
    PRINT           reduce using rule 38 (expr -> expr DOTSUB expr .)
    FOR             reduce using rule 38 (expr -> expr DOTSUB expr .)
    WHILE           reduce using rule 38 (expr -> expr DOTSUB expr .)
    IF              reduce using rule 38 (expr -> expr DOTSUB expr .)
    ID              reduce using rule 38 (expr -> expr DOTSUB expr .)
    $end            reduce using rule 38 (expr -> expr DOTSUB expr .)
    }               reduce using rule 38 (expr -> expr DOTSUB expr .)
    ELSE            reduce using rule 38 (expr -> expr DOTSUB expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    '               shift and go to state 59


state 87

    (39) expr -> expr DOTADD expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               reduce using rule 39 (expr -> expr DOTADD expr .)
    DOTSUB          reduce using rule 39 (expr -> expr DOTADD expr .)
    DOTADD          reduce using rule 39 (expr -> expr DOTADD expr .)
    SUB             reduce using rule 39 (expr -> expr DOTADD expr .)
    ADD             reduce using rule 39 (expr -> expr DOTADD expr .)
    NEQ             reduce using rule 39 (expr -> expr DOTADD expr .)
    EQ              reduce using rule 39 (expr -> expr DOTADD expr .)
    GTE             reduce using rule 39 (expr -> expr DOTADD expr .)
    LTE             reduce using rule 39 (expr -> expr DOTADD expr .)
    GT              reduce using rule 39 (expr -> expr DOTADD expr .)
    LT              reduce using rule 39 (expr -> expr DOTADD expr .)
    )               reduce using rule 39 (expr -> expr DOTADD expr .)
    RETURN          reduce using rule 39 (expr -> expr DOTADD expr .)
    CONTINUE        reduce using rule 39 (expr -> expr DOTADD expr .)
    BREAK           reduce using rule 39 (expr -> expr DOTADD expr .)
    {               reduce using rule 39 (expr -> expr DOTADD expr .)
    PRINT           reduce using rule 39 (expr -> expr DOTADD expr .)
    FOR             reduce using rule 39 (expr -> expr DOTADD expr .)
    WHILE           reduce using rule 39 (expr -> expr DOTADD expr .)
    IF              reduce using rule 39 (expr -> expr DOTADD expr .)
    ID              reduce using rule 39 (expr -> expr DOTADD expr .)
    $end            reduce using rule 39 (expr -> expr DOTADD expr .)
    }               reduce using rule 39 (expr -> expr DOTADD expr .)
    ELSE            reduce using rule 39 (expr -> expr DOTADD expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    '               shift and go to state 59


state 88

    (40) expr -> expr DIV expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               reduce using rule 40 (expr -> expr DIV expr .)
    DOTDIV          reduce using rule 40 (expr -> expr DIV expr .)
    DOTMUL          reduce using rule 40 (expr -> expr DIV expr .)
    DOTSUB          reduce using rule 40 (expr -> expr DIV expr .)
    DOTADD          reduce using rule 40 (expr -> expr DIV expr .)
    DIV             reduce using rule 40 (expr -> expr DIV expr .)
    MUL             reduce using rule 40 (expr -> expr DIV expr .)
    SUB             reduce using rule 40 (expr -> expr DIV expr .)
    ADD             reduce using rule 40 (expr -> expr DIV expr .)
    NEQ             reduce using rule 40 (expr -> expr DIV expr .)
    EQ              reduce using rule 40 (expr -> expr DIV expr .)
    GTE             reduce using rule 40 (expr -> expr DIV expr .)
    LTE             reduce using rule 40 (expr -> expr DIV expr .)
    GT              reduce using rule 40 (expr -> expr DIV expr .)
    LT              reduce using rule 40 (expr -> expr DIV expr .)
    )               reduce using rule 40 (expr -> expr DIV expr .)
    RETURN          reduce using rule 40 (expr -> expr DIV expr .)
    CONTINUE        reduce using rule 40 (expr -> expr DIV expr .)
    BREAK           reduce using rule 40 (expr -> expr DIV expr .)
    {               reduce using rule 40 (expr -> expr DIV expr .)
    PRINT           reduce using rule 40 (expr -> expr DIV expr .)
    FOR             reduce using rule 40 (expr -> expr DIV expr .)
    WHILE           reduce using rule 40 (expr -> expr DIV expr .)
    IF              reduce using rule 40 (expr -> expr DIV expr .)
    ID              reduce using rule 40 (expr -> expr DIV expr .)
    $end            reduce using rule 40 (expr -> expr DIV expr .)
    }               reduce using rule 40 (expr -> expr DIV expr .)
    ELSE            reduce using rule 40 (expr -> expr DIV expr .)
    '               shift and go to state 59


state 89

    (41) expr -> expr MUL expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               reduce using rule 41 (expr -> expr MUL expr .)
    DOTDIV          reduce using rule 41 (expr -> expr MUL expr .)
    DOTMUL          reduce using rule 41 (expr -> expr MUL expr .)
    DOTSUB          reduce using rule 41 (expr -> expr MUL expr .)
    DOTADD          reduce using rule 41 (expr -> expr MUL expr .)
    DIV             reduce using rule 41 (expr -> expr MUL expr .)
    MUL             reduce using rule 41 (expr -> expr MUL expr .)
    SUB             reduce using rule 41 (expr -> expr MUL expr .)
    ADD             reduce using rule 41 (expr -> expr MUL expr .)
    NEQ             reduce using rule 41 (expr -> expr MUL expr .)
    EQ              reduce using rule 41 (expr -> expr MUL expr .)
    GTE             reduce using rule 41 (expr -> expr MUL expr .)
    LTE             reduce using rule 41 (expr -> expr MUL expr .)
    GT              reduce using rule 41 (expr -> expr MUL expr .)
    LT              reduce using rule 41 (expr -> expr MUL expr .)
    )               reduce using rule 41 (expr -> expr MUL expr .)
    RETURN          reduce using rule 41 (expr -> expr MUL expr .)
    CONTINUE        reduce using rule 41 (expr -> expr MUL expr .)
    BREAK           reduce using rule 41 (expr -> expr MUL expr .)
    {               reduce using rule 41 (expr -> expr MUL expr .)
    PRINT           reduce using rule 41 (expr -> expr MUL expr .)
    FOR             reduce using rule 41 (expr -> expr MUL expr .)
    WHILE           reduce using rule 41 (expr -> expr MUL expr .)
    IF              reduce using rule 41 (expr -> expr MUL expr .)
    ID              reduce using rule 41 (expr -> expr MUL expr .)
    $end            reduce using rule 41 (expr -> expr MUL expr .)
    }               reduce using rule 41 (expr -> expr MUL expr .)
    ELSE            reduce using rule 41 (expr -> expr MUL expr .)
    '               shift and go to state 59


state 90

    (42) expr -> expr SUB expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               reduce using rule 42 (expr -> expr SUB expr .)
    DOTSUB          reduce using rule 42 (expr -> expr SUB expr .)
    DOTADD          reduce using rule 42 (expr -> expr SUB expr .)
    SUB             reduce using rule 42 (expr -> expr SUB expr .)
    ADD             reduce using rule 42 (expr -> expr SUB expr .)
    NEQ             reduce using rule 42 (expr -> expr SUB expr .)
    EQ              reduce using rule 42 (expr -> expr SUB expr .)
    GTE             reduce using rule 42 (expr -> expr SUB expr .)
    LTE             reduce using rule 42 (expr -> expr SUB expr .)
    GT              reduce using rule 42 (expr -> expr SUB expr .)
    LT              reduce using rule 42 (expr -> expr SUB expr .)
    )               reduce using rule 42 (expr -> expr SUB expr .)
    RETURN          reduce using rule 42 (expr -> expr SUB expr .)
    CONTINUE        reduce using rule 42 (expr -> expr SUB expr .)
    BREAK           reduce using rule 42 (expr -> expr SUB expr .)
    {               reduce using rule 42 (expr -> expr SUB expr .)
    PRINT           reduce using rule 42 (expr -> expr SUB expr .)
    FOR             reduce using rule 42 (expr -> expr SUB expr .)
    WHILE           reduce using rule 42 (expr -> expr SUB expr .)
    IF              reduce using rule 42 (expr -> expr SUB expr .)
    ID              reduce using rule 42 (expr -> expr SUB expr .)
    $end            reduce using rule 42 (expr -> expr SUB expr .)
    }               reduce using rule 42 (expr -> expr SUB expr .)
    ELSE            reduce using rule 42 (expr -> expr SUB expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    '               shift and go to state 59


state 91

    (43) expr -> expr ADD expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               reduce using rule 43 (expr -> expr ADD expr .)
    DOTSUB          reduce using rule 43 (expr -> expr ADD expr .)
    DOTADD          reduce using rule 43 (expr -> expr ADD expr .)
    SUB             reduce using rule 43 (expr -> expr ADD expr .)
    ADD             reduce using rule 43 (expr -> expr ADD expr .)
    NEQ             reduce using rule 43 (expr -> expr ADD expr .)
    EQ              reduce using rule 43 (expr -> expr ADD expr .)
    GTE             reduce using rule 43 (expr -> expr ADD expr .)
    LTE             reduce using rule 43 (expr -> expr ADD expr .)
    GT              reduce using rule 43 (expr -> expr ADD expr .)
    LT              reduce using rule 43 (expr -> expr ADD expr .)
    )               reduce using rule 43 (expr -> expr ADD expr .)
    RETURN          reduce using rule 43 (expr -> expr ADD expr .)
    CONTINUE        reduce using rule 43 (expr -> expr ADD expr .)
    BREAK           reduce using rule 43 (expr -> expr ADD expr .)
    {               reduce using rule 43 (expr -> expr ADD expr .)
    PRINT           reduce using rule 43 (expr -> expr ADD expr .)
    FOR             reduce using rule 43 (expr -> expr ADD expr .)
    WHILE           reduce using rule 43 (expr -> expr ADD expr .)
    IF              reduce using rule 43 (expr -> expr ADD expr .)
    ID              reduce using rule 43 (expr -> expr ADD expr .)
    $end            reduce using rule 43 (expr -> expr ADD expr .)
    }               reduce using rule 43 (expr -> expr ADD expr .)
    ELSE            reduce using rule 43 (expr -> expr ADD expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    '               shift and go to state 59


state 92

    (49) rel_expr -> expr NEQ expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               reduce using rule 49 (rel_expr -> expr NEQ expr .)
    NEQ             reduce using rule 49 (rel_expr -> expr NEQ expr .)
    EQ              reduce using rule 49 (rel_expr -> expr NEQ expr .)
    GTE             reduce using rule 49 (rel_expr -> expr NEQ expr .)
    LTE             reduce using rule 49 (rel_expr -> expr NEQ expr .)
    GT              reduce using rule 49 (rel_expr -> expr NEQ expr .)
    LT              reduce using rule 49 (rel_expr -> expr NEQ expr .)
    )               reduce using rule 49 (rel_expr -> expr NEQ expr .)
    RETURN          reduce using rule 49 (rel_expr -> expr NEQ expr .)
    CONTINUE        reduce using rule 49 (rel_expr -> expr NEQ expr .)
    BREAK           reduce using rule 49 (rel_expr -> expr NEQ expr .)
    {               reduce using rule 49 (rel_expr -> expr NEQ expr .)
    PRINT           reduce using rule 49 (rel_expr -> expr NEQ expr .)
    FOR             reduce using rule 49 (rel_expr -> expr NEQ expr .)
    WHILE           reduce using rule 49 (rel_expr -> expr NEQ expr .)
    IF              reduce using rule 49 (rel_expr -> expr NEQ expr .)
    ID              reduce using rule 49 (rel_expr -> expr NEQ expr .)
    $end            reduce using rule 49 (rel_expr -> expr NEQ expr .)
    }               reduce using rule 49 (rel_expr -> expr NEQ expr .)
    ELSE            reduce using rule 49 (rel_expr -> expr NEQ expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DOTSUB          shift and go to state 53
    DOTADD          shift and go to state 54
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    SUB             shift and go to state 57
    ADD             shift and go to state 58
    '               shift and go to state 59


state 93

    (50) rel_expr -> expr EQ expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               reduce using rule 50 (rel_expr -> expr EQ expr .)
    NEQ             reduce using rule 50 (rel_expr -> expr EQ expr .)
    EQ              reduce using rule 50 (rel_expr -> expr EQ expr .)
    GTE             reduce using rule 50 (rel_expr -> expr EQ expr .)
    LTE             reduce using rule 50 (rel_expr -> expr EQ expr .)
    GT              reduce using rule 50 (rel_expr -> expr EQ expr .)
    LT              reduce using rule 50 (rel_expr -> expr EQ expr .)
    )               reduce using rule 50 (rel_expr -> expr EQ expr .)
    RETURN          reduce using rule 50 (rel_expr -> expr EQ expr .)
    CONTINUE        reduce using rule 50 (rel_expr -> expr EQ expr .)
    BREAK           reduce using rule 50 (rel_expr -> expr EQ expr .)
    {               reduce using rule 50 (rel_expr -> expr EQ expr .)
    PRINT           reduce using rule 50 (rel_expr -> expr EQ expr .)
    FOR             reduce using rule 50 (rel_expr -> expr EQ expr .)
    WHILE           reduce using rule 50 (rel_expr -> expr EQ expr .)
    IF              reduce using rule 50 (rel_expr -> expr EQ expr .)
    ID              reduce using rule 50 (rel_expr -> expr EQ expr .)
    $end            reduce using rule 50 (rel_expr -> expr EQ expr .)
    }               reduce using rule 50 (rel_expr -> expr EQ expr .)
    ELSE            reduce using rule 50 (rel_expr -> expr EQ expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DOTSUB          shift and go to state 53
    DOTADD          shift and go to state 54
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    SUB             shift and go to state 57
    ADD             shift and go to state 58
    '               shift and go to state 59


state 94

    (51) rel_expr -> expr GTE expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               reduce using rule 51 (rel_expr -> expr GTE expr .)
    NEQ             reduce using rule 51 (rel_expr -> expr GTE expr .)
    EQ              reduce using rule 51 (rel_expr -> expr GTE expr .)
    GTE             reduce using rule 51 (rel_expr -> expr GTE expr .)
    LTE             reduce using rule 51 (rel_expr -> expr GTE expr .)
    GT              reduce using rule 51 (rel_expr -> expr GTE expr .)
    LT              reduce using rule 51 (rel_expr -> expr GTE expr .)
    )               reduce using rule 51 (rel_expr -> expr GTE expr .)
    RETURN          reduce using rule 51 (rel_expr -> expr GTE expr .)
    CONTINUE        reduce using rule 51 (rel_expr -> expr GTE expr .)
    BREAK           reduce using rule 51 (rel_expr -> expr GTE expr .)
    {               reduce using rule 51 (rel_expr -> expr GTE expr .)
    PRINT           reduce using rule 51 (rel_expr -> expr GTE expr .)
    FOR             reduce using rule 51 (rel_expr -> expr GTE expr .)
    WHILE           reduce using rule 51 (rel_expr -> expr GTE expr .)
    IF              reduce using rule 51 (rel_expr -> expr GTE expr .)
    ID              reduce using rule 51 (rel_expr -> expr GTE expr .)
    $end            reduce using rule 51 (rel_expr -> expr GTE expr .)
    }               reduce using rule 51 (rel_expr -> expr GTE expr .)
    ELSE            reduce using rule 51 (rel_expr -> expr GTE expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DOTSUB          shift and go to state 53
    DOTADD          shift and go to state 54
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    SUB             shift and go to state 57
    ADD             shift and go to state 58
    '               shift and go to state 59


state 95

    (52) rel_expr -> expr LTE expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               reduce using rule 52 (rel_expr -> expr LTE expr .)
    NEQ             reduce using rule 52 (rel_expr -> expr LTE expr .)
    EQ              reduce using rule 52 (rel_expr -> expr LTE expr .)
    GTE             reduce using rule 52 (rel_expr -> expr LTE expr .)
    LTE             reduce using rule 52 (rel_expr -> expr LTE expr .)
    GT              reduce using rule 52 (rel_expr -> expr LTE expr .)
    LT              reduce using rule 52 (rel_expr -> expr LTE expr .)
    )               reduce using rule 52 (rel_expr -> expr LTE expr .)
    RETURN          reduce using rule 52 (rel_expr -> expr LTE expr .)
    CONTINUE        reduce using rule 52 (rel_expr -> expr LTE expr .)
    BREAK           reduce using rule 52 (rel_expr -> expr LTE expr .)
    {               reduce using rule 52 (rel_expr -> expr LTE expr .)
    PRINT           reduce using rule 52 (rel_expr -> expr LTE expr .)
    FOR             reduce using rule 52 (rel_expr -> expr LTE expr .)
    WHILE           reduce using rule 52 (rel_expr -> expr LTE expr .)
    IF              reduce using rule 52 (rel_expr -> expr LTE expr .)
    ID              reduce using rule 52 (rel_expr -> expr LTE expr .)
    $end            reduce using rule 52 (rel_expr -> expr LTE expr .)
    }               reduce using rule 52 (rel_expr -> expr LTE expr .)
    ELSE            reduce using rule 52 (rel_expr -> expr LTE expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DOTSUB          shift and go to state 53
    DOTADD          shift and go to state 54
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    SUB             shift and go to state 57
    ADD             shift and go to state 58
    '               shift and go to state 59


state 96

    (53) rel_expr -> expr GT expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               reduce using rule 53 (rel_expr -> expr GT expr .)
    NEQ             reduce using rule 53 (rel_expr -> expr GT expr .)
    EQ              reduce using rule 53 (rel_expr -> expr GT expr .)
    GTE             reduce using rule 53 (rel_expr -> expr GT expr .)
    LTE             reduce using rule 53 (rel_expr -> expr GT expr .)
    GT              reduce using rule 53 (rel_expr -> expr GT expr .)
    LT              reduce using rule 53 (rel_expr -> expr GT expr .)
    )               reduce using rule 53 (rel_expr -> expr GT expr .)
    RETURN          reduce using rule 53 (rel_expr -> expr GT expr .)
    CONTINUE        reduce using rule 53 (rel_expr -> expr GT expr .)
    BREAK           reduce using rule 53 (rel_expr -> expr GT expr .)
    {               reduce using rule 53 (rel_expr -> expr GT expr .)
    PRINT           reduce using rule 53 (rel_expr -> expr GT expr .)
    FOR             reduce using rule 53 (rel_expr -> expr GT expr .)
    WHILE           reduce using rule 53 (rel_expr -> expr GT expr .)
    IF              reduce using rule 53 (rel_expr -> expr GT expr .)
    ID              reduce using rule 53 (rel_expr -> expr GT expr .)
    $end            reduce using rule 53 (rel_expr -> expr GT expr .)
    }               reduce using rule 53 (rel_expr -> expr GT expr .)
    ELSE            reduce using rule 53 (rel_expr -> expr GT expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DOTSUB          shift and go to state 53
    DOTADD          shift and go to state 54
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    SUB             shift and go to state 57
    ADD             shift and go to state 58
    '               shift and go to state 59


state 97

    (54) rel_expr -> expr LT expr .
    (36) expr -> expr . DOTDIV expr
    (37) expr -> expr . DOTMUL expr
    (38) expr -> expr . DOTSUB expr
    (39) expr -> expr . DOTADD expr
    (40) expr -> expr . DIV expr
    (41) expr -> expr . MUL expr
    (42) expr -> expr . SUB expr
    (43) expr -> expr . ADD expr
    (44) expr -> expr . '
    (49) rel_expr -> expr . NEQ expr
    (50) rel_expr -> expr . EQ expr
    (51) rel_expr -> expr . GTE expr
    (52) rel_expr -> expr . LTE expr
    (53) rel_expr -> expr . GT expr
    (54) rel_expr -> expr . LT expr
    ;               reduce using rule 54 (rel_expr -> expr LT expr .)
    NEQ             reduce using rule 54 (rel_expr -> expr LT expr .)
    EQ              reduce using rule 54 (rel_expr -> expr LT expr .)
    GTE             reduce using rule 54 (rel_expr -> expr LT expr .)
    LTE             reduce using rule 54 (rel_expr -> expr LT expr .)
    GT              reduce using rule 54 (rel_expr -> expr LT expr .)
    LT              reduce using rule 54 (rel_expr -> expr LT expr .)
    )               reduce using rule 54 (rel_expr -> expr LT expr .)
    RETURN          reduce using rule 54 (rel_expr -> expr LT expr .)
    CONTINUE        reduce using rule 54 (rel_expr -> expr LT expr .)
    BREAK           reduce using rule 54 (rel_expr -> expr LT expr .)
    {               reduce using rule 54 (rel_expr -> expr LT expr .)
    PRINT           reduce using rule 54 (rel_expr -> expr LT expr .)
    FOR             reduce using rule 54 (rel_expr -> expr LT expr .)
    WHILE           reduce using rule 54 (rel_expr -> expr LT expr .)
    IF              reduce using rule 54 (rel_expr -> expr LT expr .)
    ID              reduce using rule 54 (rel_expr -> expr LT expr .)
    $end            reduce using rule 54 (rel_expr -> expr LT expr .)
    }               reduce using rule 54 (rel_expr -> expr LT expr .)
    ELSE            reduce using rule 54 (rel_expr -> expr LT expr .)
    DOTDIV          shift and go to state 51
    DOTMUL          shift and go to state 52
    DOTSUB          shift and go to state 53
    DOTADD          shift and go to state 54
    DIV             shift and go to state 55
    MUL             shift and go to state 56
    SUB             shift and go to state 57
    ADD             shift and go to state 58
    '               shift and go to state 59


state 98

    (35) expr -> ( expr ) .
    ;               reduce using rule 35 (expr -> ( expr ) .)
    DOTDIV          reduce using rule 35 (expr -> ( expr ) .)
    DOTMUL          reduce using rule 35 (expr -> ( expr ) .)
    DOTSUB          reduce using rule 35 (expr -> ( expr ) .)
    DOTADD          reduce using rule 35 (expr -> ( expr ) .)
    DIV             reduce using rule 35 (expr -> ( expr ) .)
    MUL             reduce using rule 35 (expr -> ( expr ) .)
    SUB             reduce using rule 35 (expr -> ( expr ) .)
    ADD             reduce using rule 35 (expr -> ( expr ) .)
    '               reduce using rule 35 (expr -> ( expr ) .)
    NEQ             reduce using rule 35 (expr -> ( expr ) .)
    EQ              reduce using rule 35 (expr -> ( expr ) .)
    GTE             reduce using rule 35 (expr -> ( expr ) .)
    LTE             reduce using rule 35 (expr -> ( expr ) .)
    GT              reduce using rule 35 (expr -> ( expr ) .)
    LT              reduce using rule 35 (expr -> ( expr ) .)
    )               reduce using rule 35 (expr -> ( expr ) .)
    RETURN          reduce using rule 35 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 35 (expr -> ( expr ) .)
    BREAK           reduce using rule 35 (expr -> ( expr ) .)
    {               reduce using rule 35 (expr -> ( expr ) .)
    PRINT           reduce using rule 35 (expr -> ( expr ) .)
    FOR             reduce using rule 35 (expr -> ( expr ) .)
    WHILE           reduce using rule 35 (expr -> ( expr ) .)
    IF              reduce using rule 35 (expr -> ( expr ) .)
    ID              reduce using rule 35 (expr -> ( expr ) .)
    $end            reduce using rule 35 (expr -> ( expr ) .)
    }               reduce using rule 35 (expr -> ( expr ) .)
    ELSE            reduce using rule 35 (expr -> ( expr ) .)


state 99

    (25) matrix_func -> EYE ( value . )
    )               shift and go to state 107


state 100

    (26) matrix_func -> ONES ( value . )
    )               shift and go to state 108


state 101

    (27) matrix_func -> ZEROS ( value . )
    )               shift and go to state 109


state 102

    (32) vector -> [ string_of_values ] .
    DIVASSIGN       reduce using rule 32 (vector -> [ string_of_values ] .)
    MULASSIGN       reduce using rule 32 (vector -> [ string_of_values ] .)
    SUBASSIGN       reduce using rule 32 (vector -> [ string_of_values ] .)
    ADDASSIGN       reduce using rule 32 (vector -> [ string_of_values ] .)
    =               reduce using rule 32 (vector -> [ string_of_values ] .)
    [               reduce using rule 32 (vector -> [ string_of_values ] .)
    ;               reduce using rule 32 (vector -> [ string_of_values ] .)
    DOTDIV          reduce using rule 32 (vector -> [ string_of_values ] .)
    DOTMUL          reduce using rule 32 (vector -> [ string_of_values ] .)
    DOTSUB          reduce using rule 32 (vector -> [ string_of_values ] .)
    DOTADD          reduce using rule 32 (vector -> [ string_of_values ] .)
    DIV             reduce using rule 32 (vector -> [ string_of_values ] .)
    MUL             reduce using rule 32 (vector -> [ string_of_values ] .)
    SUB             reduce using rule 32 (vector -> [ string_of_values ] .)
    ADD             reduce using rule 32 (vector -> [ string_of_values ] .)
    '               reduce using rule 32 (vector -> [ string_of_values ] .)
    NEQ             reduce using rule 32 (vector -> [ string_of_values ] .)
    EQ              reduce using rule 32 (vector -> [ string_of_values ] .)
    GTE             reduce using rule 32 (vector -> [ string_of_values ] .)
    LTE             reduce using rule 32 (vector -> [ string_of_values ] .)
    GT              reduce using rule 32 (vector -> [ string_of_values ] .)
    LT              reduce using rule 32 (vector -> [ string_of_values ] .)
    RETURN          reduce using rule 32 (vector -> [ string_of_values ] .)
    CONTINUE        reduce using rule 32 (vector -> [ string_of_values ] .)
    BREAK           reduce using rule 32 (vector -> [ string_of_values ] .)
    {               reduce using rule 32 (vector -> [ string_of_values ] .)
    PRINT           reduce using rule 32 (vector -> [ string_of_values ] .)
    FOR             reduce using rule 32 (vector -> [ string_of_values ] .)
    WHILE           reduce using rule 32 (vector -> [ string_of_values ] .)
    IF              reduce using rule 32 (vector -> [ string_of_values ] .)
    ID              reduce using rule 32 (vector -> [ string_of_values ] .)
    $end            reduce using rule 32 (vector -> [ string_of_values ] .)
    }               reduce using rule 32 (vector -> [ string_of_values ] .)
    ELSE            reduce using rule 32 (vector -> [ string_of_values ] .)
    )               reduce using rule 32 (vector -> [ string_of_values ] .)
    ]               reduce using rule 32 (vector -> [ string_of_values ] .)
    ,               reduce using rule 32 (vector -> [ string_of_values ] .)
    :               reduce using rule 32 (vector -> [ string_of_values ] .)


state 103

    (28) string_of_values -> string_of_values , . vector
    (30) string_of_values -> string_of_values , . value
    (32) vector -> . [ string_of_values ]
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    [               shift and go to state 46
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    vector                         shift and go to state 110
    value                          shift and go to state 111
    referance                      shift and go to state 29
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 104

    (15) for_stmt -> FOR referance = value . : value stmt
    :               shift and go to state 112


state 105

    (16) while_stmt -> WHILE ( rel_expr ) . stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (17) print_stmt -> . PRINT value
    (55) assign_expr -> . referance DIVASSIGN expr
    (56) assign_expr -> . referance MULASSIGN expr
    (57) assign_expr -> . referance SUBASSIGN expr
    (58) assign_expr -> . referance ADDASSIGN expr
    (59) assign_expr -> . referance = expr
    (15) for_stmt -> . FOR referance = value : value stmt
    (16) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (33) referance -> . referance vector
    (34) referance -> . ID
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    stmt                           shift and go to state 113
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11
    referance                      shift and go to state 14

state 106

    (13) if_stmt -> IF ( rel_expr ) . stmt
    (14) if_stmt -> IF ( rel_expr ) . stmt ELSE stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (17) print_stmt -> . PRINT value
    (55) assign_expr -> . referance DIVASSIGN expr
    (56) assign_expr -> . referance MULASSIGN expr
    (57) assign_expr -> . referance SUBASSIGN expr
    (58) assign_expr -> . referance ADDASSIGN expr
    (59) assign_expr -> . referance = expr
    (15) for_stmt -> . FOR referance = value : value stmt
    (16) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (33) referance -> . referance vector
    (34) referance -> . ID
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    stmt                           shift and go to state 114
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11
    referance                      shift and go to state 14

state 107

    (25) matrix_func -> EYE ( value ) .
    ;               reduce using rule 25 (matrix_func -> EYE ( value ) .)
    DOTDIV          reduce using rule 25 (matrix_func -> EYE ( value ) .)
    DOTMUL          reduce using rule 25 (matrix_func -> EYE ( value ) .)
    DOTSUB          reduce using rule 25 (matrix_func -> EYE ( value ) .)
    DOTADD          reduce using rule 25 (matrix_func -> EYE ( value ) .)
    DIV             reduce using rule 25 (matrix_func -> EYE ( value ) .)
    MUL             reduce using rule 25 (matrix_func -> EYE ( value ) .)
    SUB             reduce using rule 25 (matrix_func -> EYE ( value ) .)
    ADD             reduce using rule 25 (matrix_func -> EYE ( value ) .)
    '               reduce using rule 25 (matrix_func -> EYE ( value ) .)
    NEQ             reduce using rule 25 (matrix_func -> EYE ( value ) .)
    EQ              reduce using rule 25 (matrix_func -> EYE ( value ) .)
    GTE             reduce using rule 25 (matrix_func -> EYE ( value ) .)
    LTE             reduce using rule 25 (matrix_func -> EYE ( value ) .)
    GT              reduce using rule 25 (matrix_func -> EYE ( value ) .)
    LT              reduce using rule 25 (matrix_func -> EYE ( value ) .)
    )               reduce using rule 25 (matrix_func -> EYE ( value ) .)
    RETURN          reduce using rule 25 (matrix_func -> EYE ( value ) .)
    CONTINUE        reduce using rule 25 (matrix_func -> EYE ( value ) .)
    BREAK           reduce using rule 25 (matrix_func -> EYE ( value ) .)
    {               reduce using rule 25 (matrix_func -> EYE ( value ) .)
    PRINT           reduce using rule 25 (matrix_func -> EYE ( value ) .)
    FOR             reduce using rule 25 (matrix_func -> EYE ( value ) .)
    WHILE           reduce using rule 25 (matrix_func -> EYE ( value ) .)
    IF              reduce using rule 25 (matrix_func -> EYE ( value ) .)
    ID              reduce using rule 25 (matrix_func -> EYE ( value ) .)
    $end            reduce using rule 25 (matrix_func -> EYE ( value ) .)
    }               reduce using rule 25 (matrix_func -> EYE ( value ) .)
    ELSE            reduce using rule 25 (matrix_func -> EYE ( value ) .)


state 108

    (26) matrix_func -> ONES ( value ) .
    ;               reduce using rule 26 (matrix_func -> ONES ( value ) .)
    DOTDIV          reduce using rule 26 (matrix_func -> ONES ( value ) .)
    DOTMUL          reduce using rule 26 (matrix_func -> ONES ( value ) .)
    DOTSUB          reduce using rule 26 (matrix_func -> ONES ( value ) .)
    DOTADD          reduce using rule 26 (matrix_func -> ONES ( value ) .)
    DIV             reduce using rule 26 (matrix_func -> ONES ( value ) .)
    MUL             reduce using rule 26 (matrix_func -> ONES ( value ) .)
    SUB             reduce using rule 26 (matrix_func -> ONES ( value ) .)
    ADD             reduce using rule 26 (matrix_func -> ONES ( value ) .)
    '               reduce using rule 26 (matrix_func -> ONES ( value ) .)
    NEQ             reduce using rule 26 (matrix_func -> ONES ( value ) .)
    EQ              reduce using rule 26 (matrix_func -> ONES ( value ) .)
    GTE             reduce using rule 26 (matrix_func -> ONES ( value ) .)
    LTE             reduce using rule 26 (matrix_func -> ONES ( value ) .)
    GT              reduce using rule 26 (matrix_func -> ONES ( value ) .)
    LT              reduce using rule 26 (matrix_func -> ONES ( value ) .)
    )               reduce using rule 26 (matrix_func -> ONES ( value ) .)
    RETURN          reduce using rule 26 (matrix_func -> ONES ( value ) .)
    CONTINUE        reduce using rule 26 (matrix_func -> ONES ( value ) .)
    BREAK           reduce using rule 26 (matrix_func -> ONES ( value ) .)
    {               reduce using rule 26 (matrix_func -> ONES ( value ) .)
    PRINT           reduce using rule 26 (matrix_func -> ONES ( value ) .)
    FOR             reduce using rule 26 (matrix_func -> ONES ( value ) .)
    WHILE           reduce using rule 26 (matrix_func -> ONES ( value ) .)
    IF              reduce using rule 26 (matrix_func -> ONES ( value ) .)
    ID              reduce using rule 26 (matrix_func -> ONES ( value ) .)
    $end            reduce using rule 26 (matrix_func -> ONES ( value ) .)
    }               reduce using rule 26 (matrix_func -> ONES ( value ) .)
    ELSE            reduce using rule 26 (matrix_func -> ONES ( value ) .)


state 109

    (27) matrix_func -> ZEROS ( value ) .
    ;               reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    DOTDIV          reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    DOTMUL          reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    DOTSUB          reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    DOTADD          reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    DIV             reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    MUL             reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    SUB             reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    ADD             reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    '               reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    NEQ             reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    EQ              reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    GTE             reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    LTE             reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    GT              reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    LT              reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    )               reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    RETURN          reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    CONTINUE        reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    BREAK           reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    {               reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    PRINT           reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    FOR             reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    WHILE           reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    IF              reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    ID              reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    $end            reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    }               reduce using rule 27 (matrix_func -> ZEROS ( value ) .)
    ELSE            reduce using rule 27 (matrix_func -> ZEROS ( value ) .)


state 110

    (28) string_of_values -> string_of_values , vector .
    ]               reduce using rule 28 (string_of_values -> string_of_values , vector .)
    ,               reduce using rule 28 (string_of_values -> string_of_values , vector .)


state 111

    (30) string_of_values -> string_of_values , value .
    ]               reduce using rule 30 (string_of_values -> string_of_values , value .)
    ,               reduce using rule 30 (string_of_values -> string_of_values , value .)


state 112

    (15) for_stmt -> FOR referance = value : . value stmt
    (21) value -> . referance
    (22) value -> . String
    (23) value -> . FloatNum
    (24) value -> . IntNum
    (33) referance -> . referance vector
    (34) referance -> . ID
    (20) String -> . STRING
    (19) FloatNum -> . FLOATNUM
    (18) IntNum -> . INTNUM
    ID              shift and go to state 18
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    referance                      shift and go to state 29
    value                          shift and go to state 115
    String                         shift and go to state 30
    FloatNum                       shift and go to state 31
    IntNum                         shift and go to state 32

state 113

    (16) while_stmt -> WHILE ( rel_expr ) stmt .
    RETURN          reduce using rule 16 (while_stmt -> WHILE ( rel_expr ) stmt .)
    CONTINUE        reduce using rule 16 (while_stmt -> WHILE ( rel_expr ) stmt .)
    BREAK           reduce using rule 16 (while_stmt -> WHILE ( rel_expr ) stmt .)
    {               reduce using rule 16 (while_stmt -> WHILE ( rel_expr ) stmt .)
    ;               reduce using rule 16 (while_stmt -> WHILE ( rel_expr ) stmt .)
    PRINT           reduce using rule 16 (while_stmt -> WHILE ( rel_expr ) stmt .)
    FOR             reduce using rule 16 (while_stmt -> WHILE ( rel_expr ) stmt .)
    WHILE           reduce using rule 16 (while_stmt -> WHILE ( rel_expr ) stmt .)
    IF              reduce using rule 16 (while_stmt -> WHILE ( rel_expr ) stmt .)
    ID              reduce using rule 16 (while_stmt -> WHILE ( rel_expr ) stmt .)
    $end            reduce using rule 16 (while_stmt -> WHILE ( rel_expr ) stmt .)
    }               reduce using rule 16 (while_stmt -> WHILE ( rel_expr ) stmt .)
    ELSE            reduce using rule 16 (while_stmt -> WHILE ( rel_expr ) stmt .)


state 114

    (13) if_stmt -> IF ( rel_expr ) stmt .
    (14) if_stmt -> IF ( rel_expr ) stmt . ELSE stmt
    RETURN          reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    CONTINUE        reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    BREAK           reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    {               reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    ;               reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    PRINT           reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    FOR             reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    WHILE           reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    IF              reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    ID              reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    $end            reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    }               reduce using rule 13 (if_stmt -> IF ( rel_expr ) stmt .)
    ELSE            shift and go to state 116


state 115

    (15) for_stmt -> FOR referance = value : value . stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (17) print_stmt -> . PRINT value
    (55) assign_expr -> . referance DIVASSIGN expr
    (56) assign_expr -> . referance MULASSIGN expr
    (57) assign_expr -> . referance SUBASSIGN expr
    (58) assign_expr -> . referance ADDASSIGN expr
    (59) assign_expr -> . referance = expr
    (15) for_stmt -> . FOR referance = value : value stmt
    (16) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (33) referance -> . referance vector
    (34) referance -> . ID
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    referance                      shift and go to state 14
    stmt                           shift and go to state 117
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11

state 116

    (14) if_stmt -> IF ( rel_expr ) stmt ELSE . stmt
    (3) stmt -> . RETURN expr ;
    (4) stmt -> . CONTINUE ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . print_stmt
    (7) stmt -> . assign_expr
    (8) stmt -> . for_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . if_stmt
    (11) stmt -> . { statements }
    (12) stmt -> . ;
    (17) print_stmt -> . PRINT value
    (55) assign_expr -> . referance DIVASSIGN expr
    (56) assign_expr -> . referance MULASSIGN expr
    (57) assign_expr -> . referance SUBASSIGN expr
    (58) assign_expr -> . referance ADDASSIGN expr
    (59) assign_expr -> . referance = expr
    (15) for_stmt -> . FOR referance = value : value stmt
    (16) while_stmt -> . WHILE ( rel_expr ) stmt
    (13) if_stmt -> . IF ( rel_expr ) stmt
    (14) if_stmt -> . IF ( rel_expr ) stmt ELSE stmt
    (33) referance -> . referance vector
    (34) referance -> . ID
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    ;               shift and go to state 4
    PRINT           shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 18

    stmt                           shift and go to state 118
    print_stmt                     shift and go to state 7
    assign_expr                    shift and go to state 8
    for_stmt                       shift and go to state 9
    while_stmt                     shift and go to state 10
    if_stmt                        shift and go to state 11
    referance                      shift and go to state 14

state 117

    (15) for_stmt -> FOR referance = value : value stmt .
    RETURN          reduce using rule 15 (for_stmt -> FOR referance = value : value stmt .)
    CONTINUE        reduce using rule 15 (for_stmt -> FOR referance = value : value stmt .)
    BREAK           reduce using rule 15 (for_stmt -> FOR referance = value : value stmt .)
    {               reduce using rule 15 (for_stmt -> FOR referance = value : value stmt .)
    ;               reduce using rule 15 (for_stmt -> FOR referance = value : value stmt .)
    PRINT           reduce using rule 15 (for_stmt -> FOR referance = value : value stmt .)
    FOR             reduce using rule 15 (for_stmt -> FOR referance = value : value stmt .)
    WHILE           reduce using rule 15 (for_stmt -> FOR referance = value : value stmt .)
    IF              reduce using rule 15 (for_stmt -> FOR referance = value : value stmt .)
    ID              reduce using rule 15 (for_stmt -> FOR referance = value : value stmt .)
    $end            reduce using rule 15 (for_stmt -> FOR referance = value : value stmt .)
    }               reduce using rule 15 (for_stmt -> FOR referance = value : value stmt .)
    ELSE            reduce using rule 15 (for_stmt -> FOR referance = value : value stmt .)


state 118

    (14) if_stmt -> IF ( rel_expr ) stmt ELSE stmt .
    RETURN          reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    CONTINUE        reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    BREAK           reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    {               reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    ;               reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    PRINT           reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    FOR             reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    WHILE           reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    IF              reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    ID              reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    $end            reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    }               reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
    ELSE            reduce using rule 14 (if_stmt -> IF ( rel_expr ) stmt ELSE stmt .)
